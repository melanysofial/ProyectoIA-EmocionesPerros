import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
import logging
import threading
import os
from datetime import datetime
import json
import requests
import time
import random
import string
import socket
import tkinter as tk
from tkinter import messagebox, ttk
import webbrowser

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token=None, chat_id=None):
        # Obtener token y chat_id de par√°metros o variables de entorno
        self.token = token or os.getenv('TELEGRAM_BOT_TOKEN', '7668982184:AAEXrM7xx0bDKidNOhyi6xjSNYUNRpvu61U')
        self.chat_id = chat_id or os.getenv('TELEGRAM_CHAT_ID', '1673887715')
        
        if not self.token:
            raise ValueError("‚ùå Token de Telegram no proporcionado. Usa el par√°metro 'token' o la variable de entorno 'TELEGRAM_BOT_TOKEN'")
        
        # Sistema de c√≥digos de vinculaci√≥n por PC
        self.pc_name = socket.gethostname()  # Nombre de la PC - DEBE IR PRIMERO
        self.connection_code = self._generate_connection_code()
        self.authorized_users = set()  # Set de chat_ids autorizados
        
        self.application = None
        self.bot_thread = None
        self.monitoring_active = True  # Activado por defecto para alertas autom√°ticas
        self.emotion_history = []
        self.last_status_time = 0
        
        # Estados del sistema
        self.realtime_active = False  # Estado del an√°lisis en tiempo real
        self.realtime_thread = None   # Hilo del an√°lisis en tiempo real
        self.current_mode = "menu"    # Modo actual: "menu", "realtime", "video"
        self.realtime_stop_flag = False  # Flag para detener el an√°lisis
        self.camera_capture = None    # Objeto de captura de c√°mara
        self.current_frame = None     # Frame actual para captura remota
        self.frame_lock = threading.Lock()  # Lock para acceso thread-safe al frame
        
        # Cola thread-safe para alertas
        import queue
        self.alert_queue = queue.Queue()
        self.alert_processor_running = False
        
        # Crear bot con timeouts m√°s agresivos
        try:
            logger.info("üîß Creando bot con configuraci√≥n optimizada...")
            self.bot = telegram.Bot(
                token=self.token,
                request=telegram.request.HTTPXRequest(
                    connection_pool_size=1,
                    read_timeout=10,
                    write_timeout=10,
                    connect_timeout=10,
                    pool_timeout=10
                )
            )
            logger.info("‚úÖ Bot b√°sico creado")
        except Exception as e:
            logger.error(f"‚ùå Error creando bot b√°sico: {e}")
            raise e
        
        # Recomendaciones personalizadas por emoci√≥n
        self.recommendations = {
            'angry': [
                "üö® Tu perro parece molesto. Aqu√≠ algunas recomendaciones:",
                "‚Ä¢ Revisa si hay ruidos fuertes que lo estresen",
                "‚Ä¢ Verifica que tenga agua fresca y comida",
                "‚Ä¢ Dale un espacio tranquilo para calmarse",
                "‚Ä¢ Evita forzar interacciones hasta que se calme",
                "‚Ä¢ Si persiste, consulta con un veterinario"
            ],
            'sad': [
                "üò¢ Tu perro se ve triste. Te sugerimos:",
                "‚Ä¢ Ded√≠cale tiempo de calidad y caricias",
                "‚Ä¢ S√°calo a pasear si es posible",
                "‚Ä¢ Revisa si est√° enfermo o tiene dolor",
                "‚Ä¢ Aseg√∫rate de que no est√© solo por mucho tiempo",
                "‚Ä¢ Considera juguetes interactivos para estimularlo",
                "‚Ä¢ Si la tristeza persiste, consulta al veterinario"
            ],
            'happy': [
                "üòä ¬°Tu perro est√° feliz! Esto es genial:",
                "‚Ä¢ Contin√∫a con las actividades que lo hacen feliz",
                "‚Ä¢ Es un buen momento para entrenamientos positivos",
                "‚Ä¢ Puedes introducir nuevos juegos o juguetes"
            ],
            'relaxed': [
                "üòå Tu perro est√° relajado:",
                "‚Ä¢ Es el estado ideal, contin√∫a as√≠",
                "‚Ä¢ Mant√©n el ambiente tranquilo",
                "‚Ä¢ Es buen momento para descanso"
            ]
        }
        
        # Inicializar bot con men√∫
        self._setup_bot()
        
        # Mostrar c√≥digo de conexi√≥n al iniciar
        self._show_connection_code()

    def _generate_connection_code(self):
        """Generar c√≥digo √∫nico de conexi√≥n para esta PC"""
        # Combinar nombre de PC + timestamp + aleatorio para unicidad
        timestamp = str(int(time.time()))[-4:]  # √öltimos 4 d√≠gitos del timestamp
        random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
        pc_part = self.pc_name[:4].upper() if len(self.pc_name) >= 4 else self.pc_name.upper().ljust(4, 'X')
        
        code = f"{pc_part}-{timestamp}-{random_part}"
        return code
    
    def _show_connection_code(self):
        """Mostrar c√≥digo de conexi√≥n en ventana emergente amigable"""
        try:
            # Crear ventana emergente
            root = tk.Tk()
            root.title("üîê FeeliPetAI - C√≥digo de Conexi√≥n")
            root.geometry("500x600")
            root.resizable(False, False)
            
            # Configurar icono y estilo
            root.configure(bg='#f0f0f0')
            
            # Centrar ventana en la pantalla
            root.update_idletasks()
            x = (root.winfo_screenwidth() // 2) - (500 // 2)
            y = (root.winfo_screenheight() // 2) - (600 // 2)
            root.geometry(f"500x600+{x}+{y}")
            
            # Frame principal con padding
            main_frame = tk.Frame(root, bg='#f0f0f0', padx=20, pady=20)
            main_frame.pack(fill=tk.BOTH, expand=True)
            
            # T√≠tulo principal
            title_label = tk.Label(
                main_frame, 
                text="üîê C√ìDIGO DE CONEXI√ìN TELEGRAM",
                font=("Arial", 16, "bold"),
                bg='#f0f0f0',
                fg='#2c3e50'
            )
            title_label.pack(pady=(0, 10))
            
            # Informaci√≥n de PC
            pc_frame = tk.Frame(main_frame, bg='#e8f4f8', relief=tk.RAISED, bd=2)
            pc_frame.pack(fill=tk.X, pady=(0, 15))
            
            pc_label = tk.Label(
                pc_frame,
                text=f"üñ•Ô∏è PC: {self.pc_name}",
                font=("Arial", 12, "bold"),
                bg='#e8f4f8',
                fg='#34495e'
            )
            pc_label.pack(pady=10)
            
            # Frame para el c√≥digo (destacado)
            code_frame = tk.Frame(main_frame, bg='#fff3cd', relief=tk.RAISED, bd=3)
            code_frame.pack(fill=tk.X, pady=(0, 20))
            
            code_title = tk.Label(
                code_frame,
                text="üîë TU C√ìDIGO DE CONEXI√ìN:",
                font=("Arial", 11, "bold"),
                bg='#fff3cd',
                fg='#856404'
            )
            code_title.pack(pady=10)
            
            # C√≥digo en grande y seleccionable
            code_var = tk.StringVar(value=self.connection_code)
            code_entry = tk.Entry(
                code_frame,
                textvariable=code_var,
                font=("Courier New", 18, "bold"),
                justify=tk.CENTER,
                state='readonly',
                bg='#ffffff',
                fg='#d63384',
                relief=tk.SOLID,
                bd=2,
                width=20
            )
            code_entry.pack(pady=10)
            
            # Funci√≥n para copiar c√≥digo
            def copy_code():
                root.clipboard_clear()
                root.clipboard_append(self.connection_code)
                copy_btn.configure(text="‚úÖ ¬°Copiado!", bg='#28a745')
                root.after(2000, lambda: copy_btn.configure(text="üìã Copiar C√≥digo", bg='#007bff'))
            
            # Bot√≥n copiar
            copy_btn = tk.Button(
                code_frame,
                text="üìã Copiar C√≥digo",
                font=("Arial", 10, "bold"),
                bg='#007bff',
                fg='white',
                padx=20,
                pady=5,
                command=copy_code,
                relief=tk.RAISED,
                bd=2
            )
            copy_btn.pack(pady=10)
            
            # Instrucciones paso a paso
            instructions_frame = tk.Frame(main_frame, bg='#f8f9fa', relief=tk.RAISED, bd=2)
            instructions_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
            
            instructions_title = tk.Label(
                instructions_frame,
                text="üìã INSTRUCCIONES:",
                font=("Arial", 12, "bold"),
                bg='#f8f9fa',
                fg='#495057'
            )
            instructions_title.pack(pady=10)
            
            instructions = [
                "1Ô∏è‚É£ Abre Telegram en tu tel√©fono",
                "2Ô∏è‚É£ Busca el bot y env√≠a /start",
                "3Ô∏è‚É£ Copia y env√≠a el c√≥digo: " + self.connection_code,
                "4Ô∏è‚É£ ¬°Listo! Ya puedes controlar esta PC desde Telegram"
            ]
            
            for instruction in instructions:
                instr_label = tk.Label(
                    instructions_frame,
                    text=instruction,
                    font=("Arial", 10),
                    bg='#f8f9fa',
                    fg='#6c757d',
                    anchor='w'
                )
                instr_label.pack(fill=tk.X, padx=20, pady=2)
            
            # Separador
            separator = tk.Frame(main_frame, height=2, bg='#dee2e6')
            separator.pack(fill=tk.X, pady=10)
            
            # Informaci√≥n adicional
            info_label = tk.Label(
                main_frame,
                text="üí° Este c√≥digo es √∫nico para esta PC\nüîí Solo comp√°rtelo con personas de confianza\n‚ö†Ô∏è Cada PC tiene su c√≥digo √∫nico - Este permite que CUALQUIER PERSONA controle esta PC desde Telegram",
                font=("Arial", 9),
                bg='#f0f0f0',
                fg='#6c757d',
                justify=tk.CENTER
            )
            info_label.pack(pady=10)
            
            # Botones de acci√≥n
            button_frame = tk.Frame(main_frame, bg='#f0f0f0')
            button_frame.pack(fill=tk.X)
            
            def close_window():
                root.destroy()
            
            def open_telegram():
                try:
                    webbrowser.open("https://telegram.org/")
                except:
                    pass
            
            # Bot√≥n cerrar
            close_btn = tk.Button(
                button_frame,
                text="‚úÖ Entendido",
                font=("Arial", 11, "bold"),
                bg='#28a745',
                fg='white',
                padx=30,
                pady=8,
                command=close_window,
                relief=tk.RAISED,
                bd=2
            )
            close_btn.pack(side=tk.RIGHT)
            
            # Bot√≥n abrir Telegram
            telegram_btn = tk.Button(
                button_frame,
                text="üì± Abrir Telegram Web",
                font=("Arial", 10),
                bg='#0088cc',
                fg='white',
                padx=20,
                pady=8,
                command=open_telegram,
                relief=tk.RAISED,
                bd=2
            )
            telegram_btn.pack(side=tk.LEFT)
            
            # Seleccionar c√≥digo autom√°ticamente para f√°cil copia
            code_entry.select_range(0, tk.END)
            code_entry.focus()
            
            # Manejar cierre con X
            root.protocol("WM_DELETE_WINDOW", close_window)
            
            # Mostrar ventana
            root.mainloop()
            
        except Exception as e:
            logger.error(f"Error mostrando ventana de c√≥digo: {e}")
            # Fallback a consola si falla la ventana
            self._show_connection_code_console()
    
    def _show_connection_code_console(self):
        """Mostrar c√≥digo de conexi√≥n en consola (fallback)"""
        # Colores ANSI para terminal
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RED = '\033[91m'
        CYAN = '\033[96m'
        MAGENTA = '\033[95m'
        BOLD = '\033[1m'
        UNDERLINE = '\033[4m'
        RESET = '\033[0m'
        
        # Borde decorativo
        border = "‚ñà" * 70
        inner_border = "‚ñì" * 68
        
        print(f"\n{RED}{border}{RESET}")
        print(f"{RED}‚ñà{RESET}{YELLOW}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{YELLOW}{BOLD}{'üîê C√ìDIGO DE CONEXI√ìN PARA TELEGRAM':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{YELLOW}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{CYAN}{inner_border}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{GREEN}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{GREEN}{BOLD}{'üì± PC: ' + self.pc_name:^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{GREEN}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{MAGENTA}{'‚ñì' * 68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{MAGENTA}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{MAGENTA}{BOLD}{UNDERLINE}{'üîë C√ìDIGO: ' + self.connection_code:^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{MAGENTA}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{MAGENTA}{'‚ñì' * 68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{CYAN}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{CYAN}{BOLD}{'üìã INSTRUCCIONES:':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{CYAN}{'1. Abre Telegram en tu tel√©fono':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{CYAN}{'2. Busca el bot y env√≠a /start':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{CYAN}{BOLD}{'3. Env√≠a el c√≥digo: ' + self.connection_code:^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{CYAN}{'4. ¬°Listo! Ya puedes controlar esta PC desde Telegram':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}‚ñà{RESET}{YELLOW}{'':^68}{RESET}{RED}‚ñà{RESET}")
        print(f"{RED}{border}{RESET}")
        
        # C√≥digo en formato grande para f√°cil lectura
        print(f"\n{YELLOW}{'üî• C√ìDIGO PARA COPIAR üî•':^70}{RESET}")
        print(f"{GREEN}{'‚ïî' + '‚ïê' * 68 + '‚ïó'}{RESET}")
        print(f"{GREEN}‚ïë{RESET}{BOLD}{UNDERLINE}{self.connection_code:^68}{RESET}{GREEN}‚ïë{RESET}")
        print(f"{GREEN}{'‚ïö' + '‚ïê' * 68 + '‚ïù'}{RESET}\n")
    
    def _is_user_authorized(self, chat_id):
        """Verificar si el usuario est√° autorizado para usar este bot"""
        return chat_id in self.authorized_users
    
    def _authorize_user(self, chat_id):
        """Autorizar un usuario para usar este bot"""
        self.authorized_users.add(chat_id)
        logger.info(f"‚úÖ Usuario {chat_id} autorizado para PC {self.pc_name}")
    
    async def _handle_connection_code(self, message_text, chat_id):
        """Manejar c√≥digos de conexi√≥n enviados por usuarios"""
        if message_text.strip().upper() == self.connection_code:
            self._authorize_user(chat_id)
            return True
        return False

    def _setup_bot(self):
        """Configurar el bot con handlers"""
        try:
            logger.info("üîß Configurando bot de Telegram...")
            
            # Primero verificar que el bot funciona b√°sicamente
            logger.info("üß™ Verificando bot b√°sico...")
            try:
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    me = loop.run_until_complete(self.bot.get_me())
                    logger.info(f"‚úÖ Bot verificado: {me.username} ({me.first_name})")
                finally:
                    loop.close()
            except Exception as verify_error:
                logger.error(f"‚ùå Error verificando bot: {verify_error}")
                raise verify_error
            
            # Crear application
            self.application = Application.builder().token(self.token).build()
            
            # Handlers para comandos
            self.application.add_handler(CommandHandler("start", self._start_command))
            self.application.add_handler(CommandHandler("menu", self._menu_command))
            self.application.add_handler(CommandHandler("status", self._status_command))
            self.application.add_handler(CallbackQueryHandler(self._button_callback))
            
            # Handler para videos
            from telegram.ext import MessageHandler, filters
            self.application.add_handler(MessageHandler(filters.VIDEO, self._handle_video))
            
            # Handler para mensajes de texto (c√≥digos de conexi√≥n)
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_message))
            
            logger.info("‚úÖ Handlers configurados correctamente")
            
            # Iniciar el bot en un hilo separado
            self._start_bot_thread()
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando bot: {e}")
            logger.error(f"‚ùå Tipo de error: {type(e).__name__}")
            logger.error(f"‚ùå Detalles: {str(e)}")
            # No hacer raise para permitir que el programa continue sin Telegram
            logger.warning("‚ö†Ô∏è Continuando sin funcionalidad completa de Telegram")

    def _start_bot_thread(self):
        """Iniciar el bot en un hilo separado"""
        def run_bot():
            try:
                logger.info("üöÄ Iniciando hilo del bot...")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                logger.info("üîÑ Loop de evento creado")
                
                # Configurar el bot para polling m√°s controlado
                logger.info("üîç Iniciando polling de Telegram...")
                self.application.run_polling(
                    drop_pending_updates=True,
                    timeout=10
                )
                logger.info("‚úÖ Polling iniciado exitosamente")
            except Exception as e:
                logger.error(f"‚ùå Error ejecutando bot: {e}")
                logger.error(f"‚ùå Tipo de error: {type(e).__name__}")
                logger.error(f"‚ùå Detalles del error: {str(e)}")
            finally:
                try:
                    loop.close()
                    logger.info("üîÑ Loop cerrado")
                except Exception as loop_error:
                    logger.error(f"Error cerrando loop: {loop_error}")
        
        try:
            self.bot_thread = threading.Thread(target=run_bot, daemon=True)
            self.bot_thread.start()
            logger.info("ü§ñ Bot de Telegram iniciado con men√∫ interactivo")
        except Exception as thread_error:
            logger.error(f"‚ùå Error iniciando hilo del bot: {thread_error}")

    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start con sistema de autorizaci√≥n"""
        chat_id = update.message.chat_id
        user_name = update.message.from_user.first_name or "Usuario"
        
        if self._is_user_authorized(chat_id):
            # Usuario ya autorizado
            welcome_text = (
                f"üêï **¬°Bienvenido de vuelta, {user_name}!**\n\n"
                f"üñ•Ô∏è **PC Conectada:** {self.pc_name}\n"
                f"üîë **Estado:** Autorizado ‚úÖ\n\n"
                "Tu asistente personal para el bienestar de tu mascota est√° listo.\n\n"
                "Usa /menu para ver todas las opciones disponibles."
            )
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            await self._menu_command(update, context)
        else:
            # Usuario no autorizado - solicitar c√≥digo
            welcome_text = (
                f"üëã **¬°Hola {user_name}!**\n\n"
                "üêï **Bienvenido a FeeliPetAI**\n"
                "üîê **Sistema de Acceso Seguro Activado**\n\n"
                f"üñ•Ô∏è **PC:** {self.pc_name}\n"
                f"üîë **Estado:** Pendiente de autorizaci√≥n\n\n"
                "üìã **¬øC√≥mo obtener acceso?**\n"
                "1Ô∏è‚É£ Ve a la PC donde est√° ejecut√°ndose el servicio\n"
                "2Ô∏è‚É£ Busca el c√≥digo colorido que aparece en pantalla\n"
                "3Ô∏è‚É£ C√≥pialo y env√≠alo aqu√≠ como mensaje\n\n"
                "üîë **Formato del c√≥digo:** XXXX-1234-ABCD\n\n"
                "üí° **Ejemplo:**\n"
                "Si ves `GAMI-5678-MNOP` en pantalla, env√≠a:\n"
                "`GAMI-5678-MNOP`\n\n"
                "‚ö†Ô∏è **Nota:** Cada PC tiene su c√≥digo √∫nico.\n"
                "üîí **Seguridad:** Solo comparte c√≥digos con personas de confianza."
            )
            await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar mensajes de texto (principalmente c√≥digos de conexi√≥n)"""
        chat_id = update.message.chat_id
        message_text = update.message.text
        user_name = update.message.from_user.first_name or "Usuario"
        
        # Si ya est√° autorizado, ignorar mensajes de texto
        if self._is_user_authorized(chat_id):
            await update.message.reply_text(
                "‚ÑπÔ∏è **Ya est√°s conectado**\n\n"
                "Usa /menu para acceder a las funciones del bot.",
                parse_mode='Markdown'
            )
            return
        
        # Intentar autorizar con el c√≥digo
        if await self._handle_connection_code(message_text, chat_id):
            # C√≥digo correcto - autorizar usuario
            success_text = (
                f"üéâ **¬°Conexi√≥n exitosa, {user_name}!**\n\n"
                f"‚úÖ **Autorizado para PC:** {self.pc_name}\n"
                f"üîë **C√≥digo utilizado:** {self.connection_code}\n\n"
                "üêï **FeeliPetAI** est√° ahora disponible.\n\n"
                "Usa /menu para comenzar a monitorear a tu mascota."
            )
            await update.message.reply_text(success_text, parse_mode='Markdown')
            await self._menu_command(update, context)
        else:
            # C√≥digo incorrecto
            error_text = (
                "‚ùå **C√≥digo Incorrecto**\n\n"
                f"üîç **C√≥digo recibido:** `{message_text}`\n"
                f"üñ•Ô∏è **PC esperada:** {self.pc_name}\n\n"
                "üí° **Posibles problemas:**\n"
                "‚Ä¢ ‚ùó C√≥digo copiado incorrectamente\n"
                "‚Ä¢ ‚ùó Espacios o caracteres extra\n"
                "‚Ä¢ ‚ùó C√≥digo de otra PC diferente\n"
                "‚Ä¢ ‚ùó Aplicaci√≥n reiniciada (c√≥digo cambiado)\n\n"
                "üîÑ **¬øQu√© hacer?**\n"
                "1Ô∏è‚É£ Ve a la PC y verifica el c√≥digo actual\n"
                "2Ô∏è‚É£ C√≥pialo exactamente como aparece\n"
                "3Ô∏è‚É£ Env√≠alo sin espacios extra\n\n"
                "üìã **Formato:** XXXX-1234-ABCD\n"
                "üÜò **¬øNecesitas ayuda?** Usa /start para ver instrucciones."
            )
            await update.message.reply_text(error_text, parse_mode='Markdown')

    async def _menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Mostrar men√∫ principal con nuevas opciones"""
        # Verificar autorizaci√≥n
        chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
        
        if not self._is_user_authorized(chat_id):
            unauthorized_text = (
                "üîê **ACCESO DENEGADO**\n\n"
                "‚ùå No est√°s autorizado para usar este bot.\n\n"
                "üìã Para conectarte, env√≠a el c√≥digo de tu PC.\n"
                "Usa /start para ver las instrucciones."
            )
            
            if update.message:
                await update.message.reply_text(unauthorized_text, parse_mode='Markdown')
            else:
                await update.callback_query.message.reply_text(unauthorized_text, parse_mode='Markdown')
            return
        
        keyboard = [
            [InlineKeyboardButton("üìπ An√°lisis en Tiempo Real", callback_data="realtime_analysis")],
            [InlineKeyboardButton("üé¨ Analizar Video", callback_data="video_analysis")],
            [InlineKeyboardButton("üìä Estado Actual", callback_data="status")],
            [InlineKeyboardButton("üìà Resumen del D√≠a", callback_data="summary")],
            [InlineKeyboardButton("üîî Activar Monitoreo", callback_data="monitor_on")],
            [InlineKeyboardButton("üîï Pausar Monitoreo", callback_data="monitor_off")],
            [InlineKeyboardButton("üí° Consejos Generales", callback_data="tips")],
            [InlineKeyboardButton("üíé Versi√≥n Premium", callback_data="premium_info")],
            [InlineKeyboardButton("üö™ Desconectar de PC", callback_data="disconnect_pc")],
            [InlineKeyboardButton("‚ùì Ayuda", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        menu_text = (
            "üéõÔ∏è **MEN√ö PRINCIPAL**\n\n"
            f"üñ•Ô∏è **PC:** {self.pc_name}\n"
            "Selecciona una opci√≥n para gestionar el monitoreo de tu mascota:"
        )
        
        if update.message:
            await update.message.reply_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')
        elif update.callback_query:
            # Enviar mensaje nuevo cuando se llama desde callback
            await update.callback_query.message.reply_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            # Fallback: intentar con callback_query si no hay message
            await update.callback_query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def _status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /status"""
        status_text = self._get_current_status()
        await update.message.reply_text(status_text, parse_mode='Markdown')

    async def _button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar clics en botones con manejo de errores mejorado"""
        query = update.callback_query
        
        # Verificar autorizaci√≥n primero
        chat_id = query.message.chat_id
        if not self._is_user_authorized(chat_id):
            try:
                await query.answer("‚ùå No autorizado", show_alert=True)
            except:
                pass  # Ignorar errores de query expirado
            
            await query.message.reply_text(
                "üîê **ACCESO DENEGADO**\n\nUsa /start para autorizar tu acceso.",
                parse_mode='Markdown'
            )
            return
        
        # Intentar responder al callback query de forma segura
        try:
            await query.answer()
        except Exception as callback_error:
            # Ignorar errores de callback expirado
            logger.debug(f"Callback query expirado/inv√°lido: {callback_error}")
            pass
        
        # Bot√≥n para mostrar men√∫
        if query.data == "show_menu":
            await self._menu_command(update, context)
            return
            
        # An√°lisis en tiempo real
        elif query.data == "realtime_analysis":
            await self._handle_realtime_analysis(update, context)
            
        # An√°lisis de video
        elif query.data == "video_analysis":
            await self._handle_video_analysis_request(update, context)
            
        elif query.data == "status":
            status_text = self._get_current_status()
            keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "summary":
            summary_text = self._get_daily_summary()
            keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(summary_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "monitor_on":
            self.monitoring_active = True
            keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "üîî **Monitoreo Activado**\n\n"
                "‚úÖ Ahora recibir√°s alertas autom√°ticas sobre el estado emocional de tu mascota.\n"
                "‚úÖ Actualizaciones peri√≥dicas cada 30 minutos\n"
                "‚úÖ Alertas inmediatas ante patrones preocupantes\n\n"
                "El sistema est√° monitoreando activamente a tu mascota.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif query.data == "monitor_off":
            self.monitoring_active = False
            keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # Enviar mensaje nuevo en lugar de editar
            await query.message.reply_text(
                "üîï **Monitoreo Pausado**\n\n"
                "‚ùå Las alertas autom√°ticas est√°n desactivadas\n"
                "‚ùå No recibir√°s actualizaciones peri√≥dicas\n"
                "‚ùå No se enviar√°n alertas de patrones preocupantes\n\n"
                "El an√°lisis contin√∫a pero sin notificaciones autom√°ticas.\n"
                "Puedes consultar el estado manualmente cuando gustes.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif query.data == "tips":
            tips_text = self._get_general_tips()
            keyboard = [[InlineKeyboardButton("ÔøΩ Mostrar Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # Enviar mensaje nuevo en lugar de editar
            await query.message.reply_text(tips_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "help":
            help_text = (
                "‚ùì **AYUDA**\n\n"
                "**Comandos disponibles:**\n"
                "‚Ä¢ /start - Iniciar el bot\n"
                "‚Ä¢ /menu - Mostrar men√∫ principal\n"
                "‚Ä¢ /status - Estado actual de tu mascota\n\n"
                "**Funciones:**\n"
                "‚Ä¢ Monitoreo en tiempo real\n"
                "‚Ä¢ Alertas autom√°ticas\n"
                "‚Ä¢ Res√∫menes diarios\n"
                "‚Ä¢ Recomendaciones personalizadas\n\n"
                "**Estado del Monitoreo:**\n"
                f"üîî Monitoreo: {'‚úÖ ACTIVO' if self.monitoring_active else '‚ùå PAUSADO'}\n\n"
                "El sistema analiza las emociones de tu mascota y te mantiene informado."
            )
            keyboard = [[InlineKeyboardButton("ÔøΩ Mostrar Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # Enviar mensaje nuevo en lugar de editar
            await query.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "disconnect_pc":
            # Confirmar antes de desconectar
            keyboard = [
                [InlineKeyboardButton("‚úÖ S√≠, desconectar", callback_data="confirm_disconnect")],
                [InlineKeyboardButton("‚ùå Cancelar", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # Enviar mensaje nuevo en lugar de editar
            await query.message.reply_text(
                "üö™ **Desconectar de PC**\n\n"
                f"üñ•Ô∏è **PC actual:** {self.pc_name}\n\n"
                "‚ö†Ô∏è Esta acci√≥n te desconectar√° de esta PC.\n"
                "Tendr√°s que volver a ingresar el c√≥digo para reconectarte.\n\n"
                "¬øEst√°s seguro de que quieres desconectar?",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif query.data == "confirm_disconnect":
            try:
                # Desautorizar al usuario
                chat_id = query.message.chat_id
                if chat_id in self.authorized_users:
                    self.authorized_users.remove(chat_id)
                
                # Mensaje de confirmaci√≥n de desconexi√≥n
                await query.message.reply_text(
                    "‚úÖ **Desconectado Exitosamente**\n\n"
                    f"üñ•Ô∏è Has sido desconectado de **{self.pc_name}**\n\n"
                    "üîê **Para reconectarte:**\n"
                    "1Ô∏è‚É£ Env√≠a `/start`\n"
                    "2Ô∏è‚É£ Ingresa el c√≥digo de conexi√≥n actual\n\n"
                    "üëã ¬°Gracias por usar FeeliPetAI!",
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.error(f"Error desconectando usuario: {e}")
                await query.message.reply_text(
                    "‚ùå **Error al desconectar**\n\n"
                    "Hubo un problema al procesar la desconexi√≥n.\n"
                    "Usa /start para intentar reconectarte.",
                    parse_mode='Markdown'
                )
                
                await query.message.reply_text(
                    "üßπ **LIMPIEZA COMPLETADA**\n\n"
                    "‚úÖ Se intent√≥ limpiar los mensajes del bot\n"
                    "üí° Algunos mensajes pueden no eliminarse debido a limitaciones de Telegram\n"
                    "üìä El historial de an√°lisis se mantiene intacto\n\n"
                    "Puedes eliminar mensajes manualmente si es necesario.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.error(f"Error en limpieza de chat: {e}")
                
                # Enviar mensaje de error pero mantener conexi√≥n
                keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.reply_text(
                    "‚ö†Ô∏è **LIMPIEZA PARCIAL**\n\n"
                    "‚ùå Hubo problemas eliminando algunos mensajes\n"
                    "üí° Esto es normal debido a limitaciones de Telegram\n"
                    "üîß Puedes intentar eliminar mensajes manualmente\n\n"
                    "El sistema contin√∫a funcionando normalmente.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            
        # Callback para confirmar pausa de an√°lisis en tiempo real
        elif query.data == "confirm_pause_realtime":
            # Pausar an√°lisis en tiempo real y proceder con an√°lisis de video
            if self.realtime_active:
                await self._pause_realtime_analysis()
                await query.message.reply_text(
                    "‚è∏Ô∏è **An√°lisis en Tiempo Real Pausado**\n\n"
                    "‚úÖ An√°lisis pausado exitosamente\n"
                    "üé¨ Ahora puedes enviar videos para an√°lisis\n\n"
                    "üí° Usa el bot√≥n 'Tiempo Real' cuando quieras reanudar.",
                    parse_mode='Markdown'
                )
            
            # Proceder con la solicitud de an√°lisis de video
            keyboard = [
                [InlineKeyboardButton("üìπ Cambiar a Tiempo Real", callback_data="realtime_analysis")],
                [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "üé¨ **AN√ÅLISIS DE VIDEO**\n\n"
                "üìé **Env√≠a un video de tu mascota** y lo analizar√© autom√°ticamente.\n\n"
                "üìã **Requisitos del video:**\n"
                "‚Ä¢ Formato: MP4, AVI, MOV\n"
                "‚Ä¢ Duraci√≥n: M√°ximo 2 minutos\n"
                "‚Ä¢ Tama√±o: M√°ximo 20MB\n"
                "‚Ä¢ Tu perro debe ser visible claramente\n\n"
                "üîÑ **Proceso:**\n"
                "1Ô∏è‚É£ Env√≠a el video como archivo adjunto\n"
                "2Ô∏è‚É£ Procesar√© autom√°ticamente el video\n"
                "3Ô∏è‚É£ Te enviar√© el video con an√°lisis superpuesto\n"
                "4Ô∏è‚É£ Recibir√°s un resumen completo con recomendaciones\n\n"
                "üì§ **¬°Adelante, env√≠a tu video ahora!**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        # Nuevos handlers para an√°lisis en tiempo real
        elif query.data == "start_realtime":
            await self._start_realtime_analysis(update, context)
            
        elif query.data == "pause_realtime":
            await self._pause_realtime_analysis()
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è Reanudar", callback_data="resume_realtime")],
                [InlineKeyboardButton("‚èπÔ∏è Detener", callback_data="stop_realtime")],
                [InlineKeyboardButton("üè† Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "‚è∏Ô∏è **AN√ÅLISIS PAUSADO**\n\n"
                "‚èØÔ∏è El an√°lisis en tiempo real est√° pausado\n"
                "üìä Los datos anteriores se mantienen\n\n"
                "Puedes reanudar cuando gustes.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif query.data == "resume_realtime":
            await self._resume_realtime_analysis(update, context)
            
        elif query.data == "stop_realtime":
            await self._stop_realtime_analysis(update, context)
            
        elif query.data == "switch_to_video":
            await self._pause_realtime_analysis()
            await self._handle_video_analysis_request(update, context)
            
        elif query.data == "capture_frame":
            await self._capture_current_frame(update, context)
            
        elif query.data == "premium_info":
            premium_text = (
                "üíé **VERSI√ìN PREMIUM**\n\n"
                "**üÜì PLAN B√ÅSICO (Actual):**\n"
                "‚Ä¢ ‚úÖ An√°lisis de hasta 5 videos por d√≠a\n"
                "‚Ä¢ ‚úÖ Consejos generales para perros\n"
                "‚Ä¢ ‚úÖ Detecci√≥n b√°sica de emociones\n"
                "‚Ä¢ ‚ùå Sin an√°lisis en tiempo real\n"
                "‚Ä¢ ‚ùå Sin alertas autom√°ticas\n"
                "‚Ä¢ ‚ùå Sin reportes detallados\n"
                "‚Ä¢ ‚ùå Sin res√∫menes diarios\n\n"
                "**üíé PLAN PREMIUM ($3.00 USD):**\n"
                "‚Ä¢ ‚úÖ An√°lisis ilimitado de videos\n"
                "‚Ä¢ ‚úÖ An√°lisis en tiempo real por c√°mara\n"
                "‚Ä¢ ‚úÖ Alertas autom√°ticas inteligentes\n"
                "‚Ä¢ ‚úÖ Reportes detallados y estad√≠sticas\n"
                "‚Ä¢ ‚úÖ Res√∫menes diarios personalizados\n"
                "‚Ä¢ ‚úÖ Consejos especializados por raza\n"
                "‚Ä¢ ‚úÖ Historial completo de an√°lisis\n"
                "‚Ä¢ ‚úÖ Soporte prioritario\n\n"
                "**üéØ BENEFICIOS PREMIUM:**\n"
                "‚Ä¢ Monitoreo 24/7 de tu mascota\n"
                "‚Ä¢ Detecci√≥n temprana de problemas\n"
                "‚Ä¢ An√°lisis de patrones de comportamiento\n"
                "‚Ä¢ Recomendaciones veterinarias\n\n"
                "üí≥ **Pr√≥ximamente:** Sistema de pago integrado\n"
                "üìß **Contacto:** Escr√≠benos para m√°s informaci√≥n\n\n"
                "¬°Invierte $3 en el bienestar de tu mejor amigo! üêïüíñ"
            )
            keyboard = [
                [InlineKeyboardButton("üìä Ver mis l√≠mites actuales", callback_data="usage_stats")],
                [InlineKeyboardButton("üí≥ Informaci√≥n de pago", callback_data="payment_info")],
                [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(premium_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "usage_stats":
            # Aqu√≠ implementaremos el contador de videos analizados
            stats_text = (
                "üìä **ESTAD√çSTICAS DE USO**\n\n"
                "**üìÖ Hoy:**\n"
                "‚Ä¢ Videos analizados: 0/5 üìπ\n"
                "‚Ä¢ Plan actual: üÜì B√°sico\n\n"
                "**üìà Esta semana:**\n"
                "‚Ä¢ Total de an√°lisis: 0\n"
                "‚Ä¢ D√≠as activos: 0/7\n\n"
                "**üí° Recomendaci√≥n:**\n"
                "Con el plan Premium tendr√≠as an√°lisis ilimitados\n"
                "y funciones avanzadas como monitoreo en tiempo real.\n\n"
                "¬°Actualiza por solo $1 y desbloquea todo el potencial! üíé"
            )
            keyboard = [
                [InlineKeyboardButton("üíé Ver Plan Premium", callback_data="premium_info")],
                [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "payment_info":
            payment_text = (
                "üí≥ **INFORMACI√ìN DE PAGO**\n\n"
                "**üíé Plan Premium - $1.00 USD**\n\n"
                "**üöß PR√ìXIMAMENTE:**\n"
                "‚Ä¢ Integraci√≥n con PayPal\n"
                "‚Ä¢ Pago con tarjeta de cr√©dito/d√©bito\n"
                "‚Ä¢ Activaci√≥n autom√°tica instant√°nea\n\n"
                "**üìß POR AHORA:**\n"
                "Si est√°s interesado en el plan Premium,\n"
                "cont√°ctanos y te daremos acceso anticipado:\n\n"
                "‚Ä¢ Email: [Agregar email de contacto]\n"
                "‚Ä¢ Telegram: [Agregar usuario admin]\n\n"
                "**üéÅ OFERTA ESPECIAL:**\n"
                "Los primeros 100 usuarios obtendr√°n\n"
                "1 mes gratis adicional! üéâ\n\n"
                "¬°No te pierdas esta oportunidad!"
            )
            keyboard = [
                [InlineKeyboardButton("üíé Ver Beneficios Premium", callback_data="premium_info")],
                [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def _handle_realtime_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar el an√°lisis en tiempo real"""
        query = update.callback_query
        
        if self.realtime_active:
            # Si ya est√° activo, mostrar opciones de control
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è Pausar An√°lisis", callback_data="pause_realtime")],
                [InlineKeyboardButton("üì∏ Ver Ahora", callback_data="capture_frame")],
                [InlineKeyboardButton("‚èπÔ∏è Detener An√°lisis", callback_data="stop_realtime")],
                [InlineKeyboardButton("üé¨ Cambiar a Video", callback_data="switch_to_video")],
                [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "üìπ **AN√ÅLISIS EN TIEMPO REAL ACTIVO**\n\n"
                "‚úÖ El sistema est√° analizando a tu mascota en vivo\n"
                "üìä Recibes actualizaciones en tiempo real\n"
                "üîî Alertas autom√°ticas activadas\n"
                "üì∏ Puedes capturar frames instant√°neos\n\n"
                "**Opciones disponibles:**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            # Si no est√° activo, iniciar
            keyboard = [
                [InlineKeyboardButton("üöÄ Iniciar An√°lisis", callback_data="start_realtime")],
                [InlineKeyboardButton("üé¨ Mejor Analizar Video", callback_data="video_analysis")],
                [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "üìπ **AN√ÅLISIS EN TIEMPO REAL**\n\n"
                "üéØ **Caracter√≠sticas:**\n"
                "‚Ä¢ An√°lisis continuo usando la c√°mara\n"
                "‚Ä¢ Detecci√≥n inmediata de emociones\n"
                "‚Ä¢ Alertas en tiempo real\n"
                "‚Ä¢ Recomendaciones instant√°neas\n\n"
                "‚ö†Ô∏è **Requisitos:**\n"
                "‚Ä¢ C√°mara web conectada\n"
                "‚Ä¢ Aplicaci√≥n principal ejecut√°ndose\n"
                "‚Ä¢ Tu perro debe estar visible\n\n"
                "üîÑ **Nota:** El an√°lisis se ejecuta desde la aplicaci√≥n principal.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    async def _handle_video_analysis_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar solicitud de an√°lisis de video"""
        query = update.callback_query
        
        # Verificar si hay an√°lisis en tiempo real activo
        if self.realtime_active:
            # Mostrar advertencia antes de pausar
            keyboard = [
                [InlineKeyboardButton("‚úÖ S√≠, pausar y analizar video", callback_data="confirm_pause_realtime")],
                [InlineKeyboardButton("‚ùå No, mantener tiempo real", callback_data="realtime_analysis")],
                [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "‚ö†Ô∏è **AN√ÅLISIS EN TIEMPO REAL ACTIVO**\n\n"
                "üî¥ **Estado actual:** An√°lisis en tiempo real ejecut√°ndose\n\n"
                "üé¨ **¬øQuieres analizar un video?**\n"
                "Para analizar un video, necesito pausar el an√°lisis en tiempo real.\n\n"
                "üìã **¬øQu√© pasar√°?**\n"
                "‚Ä¢ ‚è∏Ô∏è Se pausar√° el an√°lisis en tiempo real\n"
                "‚Ä¢ üé¨ Se activar√° el modo de an√°lisis de video\n"
                "‚Ä¢ üîÑ Podr√°s reanudar tiempo real despu√©s\n\n"
                "¬øQuieres continuar?",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        # Si no hay an√°lisis en tiempo real activo, proceder normalmente
        keyboard = [
            [InlineKeyboardButton("üìπ Cambiar a Tiempo Real", callback_data="realtime_analysis")],
            [InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "üé¨ **AN√ÅLISIS DE VIDEO**\n\n"
            "üìé **Env√≠a un video de tu mascota** y lo analizar√© autom√°ticamente.\n\n"
            "üìã **Requisitos del video:**\n"
            "‚Ä¢ Formato: MP4, AVI, MOV\n"
            "‚Ä¢ Duraci√≥n: M√°ximo 2 minutos\n"
            "‚Ä¢ Tama√±o: M√°ximo 20MB\n"
            "‚Ä¢ Tu perro debe ser visible claramente\n\n"
            "üîÑ **Proceso:**\n"
            "1Ô∏è‚É£ Env√≠a el video como archivo adjunto\n"
            "2Ô∏è‚É£ Procesar√© autom√°ticamente el video\n"
            "3Ô∏è‚É£ Te enviar√© el video con an√°lisis superpuesto\n"
            "4Ô∏è‚É£ Recibir√°s un resumen completo con recomendaciones\n\n"
            "üì§ **¬°Adelante, env√≠a tu video ahora!**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _start_realtime_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Iniciar an√°lisis en tiempo real"""
        try:
            logger.info("üöÄ Iniciando an√°lisis en tiempo real desde Telegram...")
            
            # Verificar si ya est√° corriendo
            if self.realtime_active:
                keyboard = [
                    [InlineKeyboardButton("‚è∏Ô∏è Pausar", callback_data="pause_realtime")],
                    [InlineKeyboardButton("‚èπÔ∏è Detener", callback_data="stop_realtime")],
                    [InlineKeyboardButton("üè† Men√∫", callback_data="show_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.message.reply_text(
                    "‚ö†Ô∏è **AN√ÅLISIS YA ACTIVO**\n\n"
                    "El an√°lisis en tiempo real ya est√° ejecut√°ndose.\n"
                    "Puedes pausarlo o detenerlo si lo necesitas.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return
            
            # Cambiar estado
            self.realtime_active = True
            self.current_mode = "realtime"
            self.realtime_stop_flag = False
            
            # Iniciar hilo de an√°lisis en tiempo real
            import threading
            self.realtime_thread = threading.Thread(
                target=self._realtime_analysis_worker,
                args=(update.callback_query.message.chat_id,)
            )
            self.realtime_thread.daemon = True
            self.realtime_thread.start()
            
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è Pausar", callback_data="pause_realtime")],
                [InlineKeyboardButton("üì∏ Ver Ahora", callback_data="capture_frame")],
                [InlineKeyboardButton("‚èπÔ∏è Detener", callback_data="stop_realtime")],
                [InlineKeyboardButton("üé¨ Cambiar a Video", callback_data="switch_to_video")],
                [InlineKeyboardButton("üè† Men√∫", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.message.reply_text(
                "üöÄ **AN√ÅLISIS EN TIEMPO REAL INICIADO**\n\n"
                "‚úÖ C√°mara activada\n"
                "üìπ Analizando video en vivo\n"
                "üîî Alertas autom√°ticas activadas\n"
                "üì∏ Funci√≥n de captura instant√°nea disponible\n\n"
                "üí° **Tip:** Mant√©n a tu mascota visible en la c√°mara para mejores resultados.\n\n"
                "El an√°lisis se est√° ejecutando en segundo plano.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error iniciando an√°lisis en tiempo real: {e}")
            await update.callback_query.message.reply_text(
                "‚ùå **Error iniciando an√°lisis**\n\n"
                "No se pudo iniciar el an√°lisis en tiempo real.\n"
                "Verifica que la c√°mara est√© disponible.",
                parse_mode='Markdown'
            )

    def _realtime_analysis_worker(self, chat_id):
        """Worker que ejecuta el an√°lisis en tiempo real usando EXACTAMENTE la misma l√≥gica que la opci√≥n 2 de la consola"""
        try:
            logger.info("üìπ Iniciando an√°lisis en tiempo real desde Telegram (usando l√≥gica de consola)...")
            
            import cv2
            import time
            import os
            
            # Encontrar c√°mara disponible (misma funci√≥n que main.py)
            camera_index = self._find_available_camera()
            if camera_index is None:
                logger.error("‚ùå No se encontr√≥ ninguna c√°mara")
                self._send_error_to_chat(chat_id, "‚ùå No se encontr√≥ ninguna c√°mara disponible")
                return
            
            # Inicializar componentes (exactamente como en main.py)
            try:
                logger.info("üß† Cargando modelo de IA...")
                from .cam_utils import EmotionDetector
                detector = EmotionDetector("modelo/mejor_modelo_83.h5")
                logger.info("‚úÖ Modelo de emociones cargado exitosamente")
            except Exception as e:
                logger.error(f"‚ùå Error cargando modelo: {e}")
                self._send_error_to_chat(chat_id, f"‚ùå Error cargando modelo: {e}")
                return
            
            try:
                logger.info("üêï Inicializando detector YOLO optimizado...")
                from .yolo_dog_detector import YoloDogDetector
                yolo_detector = YoloDogDetector(confidence_threshold=0.60)
                logger.info("‚úÖ YOLOv8 cargado exitosamente (umbral: 60%)")
            except Exception as e:
                logger.error(f"‚ùå Error cargando YOLO: {e}")
                self._send_error_to_chat(chat_id, f"‚ùå Error cargando YOLO: {e}")
                return
            
            # Inicializar c√°mara (EXACTO como en main.py)
            cap = cv2.VideoCapture(camera_index)
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            cap.set(cv2.CAP_PROP_FPS, 30)
            
            if not cap.isOpened():
                logger.error("‚ùå No se pudo abrir la c√°mara")
                self._send_error_to_chat(chat_id, "‚ùå No se pudo abrir la c√°mara")
                return
            
            # Notificar √©xito
            logger.info("‚úÖ An√°lisis en tiempo real iniciado correctamente")
            self._send_status_to_chat(chat_id, "‚úÖ **AN√ÅLISIS EN TIEMPO REAL INICIADO**\n\nüñ•Ô∏è **Una ventana de c√°mara se abri√≥ en tu PC**\n\nüéÆ **Controles:**\n‚Ä¢ Q o ESC: Salir\n‚Ä¢ Telegram: Control remoto")
            
            # Variables de control (EXACTAS como en main.py)
            emotion_history = []
            cooldown_time = 2  # Reducido a 2 segundos para mejor responsividad
            last_analysis_time = time.time()
            frame_count = 0
            
            logger.info("\nüéÆ CONTROLES:")
            logger.info("  Q o ESC: Salir")
            logger.info("  Telegram: Control remoto completo")
            logger.info("\n‚ñ∂Ô∏è Iniciando detecci√≥n...\n")
            
            # BUCLE PRINCIPAL - COPIA EXACTA DE run_camera_analysis en main.py
            try:
                while self.realtime_active and not self.realtime_stop_flag:
                    ret, frame = cap.read()
                    if not ret:
                        logger.error("Error capturando frame")
                        break

                    current_time = time.time()
                    frame_count += 1
                    
                    # Actualizar frame actual para captura remota (thread-safe)
                    with self.frame_lock:
                        self.current_frame = frame.copy()
                    
                    # PASO 1: Detectar perros con YOLO
                    dog_detections = yolo_detector.detect_dogs(frame)
                    dogs_detected = yolo_detector.is_dog_detected(dog_detections)
                    
                    # PASO 2: Dibujar detecciones de YOLO solamente
                    frame = yolo_detector.draw_detections(frame, dog_detections)
                    
                    # PASO 3: Solo analizar emociones SI hay perros detectados
                    if dogs_detected and current_time - last_analysis_time >= cooldown_time:
                        try:
                            logger.info(f"üêï Analizando emociones... (perro detectado)")
                            emotion, prob, preds = detector.predict_emotion(frame)
                            
                            # Debug: Mostrar todas las predicciones para entender el problema
                            logger.info("üìä An√°lisis detallado de emociones:")
                            for label, p in zip(detector.labels, preds):
                                logger.info(f"  {label}: {p:.4f} ({'‚≠ê' if p == max(preds) else ''})")
                            logger.info(f"  üéØ Resultado final: {emotion.upper()} ({prob:.3f})")
                            
                            # Verificar si hay un problema con la clasificaci√≥n
                            if emotion == 'relaxed' and max(preds) < 0.6:
                                logger.warning(f"‚ö†Ô∏è Confianza baja en 'relaxed' ({prob:.3f}) - Podr√≠a ser clasificaci√≥n incorrecta")

                            # Determinar color seg√∫n emoci√≥n
                            color = (0, 255, 0)  # Verde por defecto
                            if emotion in ['angry', 'sad']:
                                color = (0, 0, 255)  # Rojo para emociones negativas
                            elif emotion == 'happy':
                                color = (0, 255, 255)  # Amarillo para feliz
                            
                            # Mostrar emoci√≥n en el frame con mejor posicionamiento
                            emotion_text = f'EMOCION: {emotion.upper()} ({prob:.2f})'
                            if dogs_detected:
                                # Si hay detecci√≥n YOLO, mostrar cerca del rect√°ngulo
                                best_detection = yolo_detector.get_best_dog_region(dog_detections)
                                if best_detection:
                                    x, y, w, h = best_detection
                                    cv2.putText(frame, emotion_text, (x, y + h + 30), 
                                               cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                else:
                                    cv2.putText(frame, emotion_text, (60, 120), 
                                               cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                            else:
                                # Si no hay detecci√≥n YOLO, mostrar en posici√≥n fija
                                cv2.putText(frame, emotion_text, (60, 120), 
                                           cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

                            # Acumular historial de emociones
                            emotion_history.append(emotion)
                            if len(emotion_history) > 4:  # Reducido de 8 a 4 para mejor responsividad
                                emotion_history.pop(0)
                            
                            # Actualizar historial en el bot
                            self.update_emotion_history(emotion)

                            # Verificar patrones preocupantes (reducido a 3 an√°lisis negativos de 4)
                            if len(emotion_history) >= 3 and all(e in ['sad', 'angry'] for e in emotion_history[-3:]):
                                logger.warning(f"üö® Patr√≥n preocupante detectado: {emotion} repetidamente")
                                
                                try:
                                    # Capturar imagen para la alerta
                                    timestamp = int(time.time())
                                    path = f"alerta_{emotion}_{timestamp}_{int(prob*100)}.jpg"
                                    cv2.imwrite(path, frame)
                                    
                                    # Enviar alerta con recomendaciones (funci√≥n que ya existe)
                                    self.send_alert(emotion, prob, image_path=path)
                                    
                                    # Limpiar archivo temporal
                                    try:
                                        os.remove(path)
                                    except:
                                        pass
                                    
                                    emotion_history.clear()  # Reiniciar para evitar spam
                                    logger.info("üì± Alerta enviada por Telegram")
                                    
                                except Exception as e:
                                    logger.error(f"Error enviando alerta: {e}")

                            last_analysis_time = current_time
                            
                        except Exception as e:
                            logger.error(f"Error en an√°lisis de emoci√≥n: {e}")
                    
                    elif not dogs_detected:
                        # Solo mostrar mensaje de espera si no hay detecciones
                        cv2.putText(frame, 'ESPERANDO DETECCION DE PERRO...', 
                                   (60, 80), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2)
                        # Limpiar historial si no hay perros por mucho tiempo
                        if current_time - last_analysis_time > 30:  # 30 segundos sin perros
                            if emotion_history:
                                emotion_history.clear()
                                logger.info("üßπ Historial limpiado - Sin perros detectados")

                    # Mostrar informaci√≥n de estado en el frame
                    info_y = frame.shape[0] - 100
                    cv2.putText(frame, f'Frame: {frame_count}', (10, info_y), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
                    cv2.putText(frame, f'Perros detectados: {len(dog_detections)}', (10, info_y + 20), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
                    cv2.putText(frame, f'Historial emocional: {len(emotion_history)}/4', (10, info_y + 40), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
                    
                    # Controles para Telegram
                    cv2.putText(frame, 'Q: salir | Telegram: control remoto', (10, info_y + 60), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255), 1)

                    cv2.imshow('üêï FeeliPetAI + YOLOv8', frame)

                    # Manejar teclas
                    key = cv2.waitKey(1) & 0xFF
                    if key == ord('q') or key == 27:  # Q o ESC
                        logger.info("üëã Saliendo del an√°lisis en tiempo real...")
                        self.realtime_stop_flag = True
                        break

            except KeyboardInterrupt:
                logger.info("‚ö†Ô∏è Interrupci√≥n por usuario")
            except Exception as e:
                logger.error(f"‚ùå Error en bucle principal: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå Error en worker de an√°lisis: {e}")
            self._send_error_to_chat(chat_id, f"‚ùå Error en an√°lisis: {str(e)[:50]}...")
        finally:
            # Cleanup (exacto como en main.py)
            try:
                if 'cap' in locals():
                    cap.release()
                cv2.destroyAllWindows()
                
                logger.info("üèÅ An√°lisis en tiempo real terminado exitosamente")
                self._send_status_to_chat(chat_id, "üèÅ **AN√ÅLISIS TERMINADO**\n\nLa ventana de c√°mara se ha cerrado.\n\nUsa el men√∫ para iniciar nuevamente.")
                
            except Exception as cleanup_error:
                logger.error(f"Error en cleanup: {cleanup_error}")
                
            # Resetear estado
            self.realtime_active = False
            self.realtime_stop_flag = False
            self.current_mode = "menu"
            
            # Limpiar frame actual
            with self.frame_lock:
                self.current_frame = None

    async def _resume_realtime_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Reanudar an√°lisis en tiempo real"""
        if self.realtime_active:
            keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.message.reply_text(
                "‚ö†Ô∏è El an√°lisis ya est√° activo",
                reply_markup=reply_markup
            )
            return
        
        # Verificar c√°mara disponible
        camera_index = self._find_available_camera()
        if camera_index is None:
            keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.message.reply_text(
                "‚ùå **ERROR DE C√ÅMARA**\n\n"
                "No se pudo detectar ninguna c√°mara disponible.\n"
                "Por favor verifica que:\n"
                "‚Ä¢ La c√°mara est√© conectada\n"
                "‚Ä¢ No est√© siendo usada por otra aplicaci√≥n\n"
                "‚Ä¢ Los drivers est√©n instalados correctamente",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        # Reiniciar an√°lisis
        await self._start_realtime_analysis(update, context)

    def _find_available_camera(self):
        """Encuentra la primera c√°mara disponible"""
        import cv2
        for i in range(10):
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret and frame is not None:
                    logger.info(f"‚úÖ C√°mara {i} encontrada: {frame.shape[1]}x{frame.shape[0]}")
                    cap.release()
                    return i
            cap.release()
        return None

    def _send_error_to_chat(self, chat_id, message):
        """Enviar mensaje de error a un chat espec√≠fico"""
        try:
            import requests
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            requests.post(url, json=data, timeout=10)
        except Exception as e:
            logger.error(f"Error enviando mensaje de error: {e}")

    def _send_status_to_chat(self, chat_id, message):
        """Enviar mensaje de estado a un chat espec√≠fico"""
        try:
            import requests
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            requests.post(url, json=data, timeout=10)
        except Exception as e:
            logger.error(f"Error enviando mensaje de estado: {e}")

    def _send_emotion_alert(self, chat_id, emotion, confidence):
        """Enviar alerta de emoci√≥n preocupante"""
        try:
            emotion_messages = {
                'angry': f"‚ö†Ô∏è **ALERTA: ESTR√âS DETECTADO**\n\nTu mascota muestra signos de molestia (confianza: {confidence:.1%})\n\nüîç **Revisa:**\n‚Ä¢ Ruidos fuertes\n‚Ä¢ Cambios en el entorno\n‚Ä¢ Necesidades b√°sicas",
                'sad': f"üíô **ALERTA: TRISTEZA DETECTADA**\n\nTu mascota parece triste (confianza: {confidence:.1%})\n\nüí° **Considera:**\n‚Ä¢ Dedicar m√°s tiempo de calidad\n‚Ä¢ Actividades estimulantes\n‚Ä¢ Verificar salud general"
            }
            
            message = emotion_messages.get(emotion, f"üîî Emoci√≥n detectada: {emotion} ({confidence:.1%})")
            
            import requests
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            requests.post(url, json=data, timeout=10)
            logger.info(f"üö® Alerta enviada: {emotion} - {confidence:.1%}")
        except Exception as e:
            logger.error(f"Error enviando alerta: {e}")

    def _send_realtime_update(self, chat_id, emotion_counts, frame_count):
        """Enviar actualizaci√≥n del an√°lisis en tiempo real"""
        try:
            total_detections = sum(emotion_counts.values())
            if total_detections == 0:
                message = "üìä **ACTUALIZACI√ìN**\n\nüîç Buscando a tu mascota...\nAseg√∫rate de que est√© visible en la c√°mara."
            else:
                dominant_emotion = max(emotion_counts.items(), key=lambda x: x[1])
                
                message = f"üìä **ACTUALIZACI√ìN EN TIEMPO REAL**\n\n"
                message += f"üéØ Emoci√≥n predominante: **{dominant_emotion[0].upper()}**\n"
                message += f"üìà Total detecciones: {total_detections}\n"
                message += f"üé¨ Frames procesados: {frame_count}\n\n"
                
                message += "üìä **Distribuci√≥n:**\n"
                for emotion, count in emotion_counts.items():
                    if count > 0:
                        percentage = (count / total_detections) * 100
                        message += f"‚Ä¢ {emotion.upper()}: {count} ({percentage:.0f}%)\n"
            
            import requests
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            requests.post(url, json=data, timeout=10)
            logger.info("üìä Actualizaci√≥n de tiempo real enviada")
        except Exception as e:
            logger.error(f"Error enviando actualizaci√≥n: {e}")

    async def _pause_realtime_analysis(self):
        """Pausar an√°lisis en tiempo real"""
        self.realtime_active = False
        self.current_mode = "paused"
        logger.info("‚è∏Ô∏è An√°lisis en tiempo real pausado")

    async def _stop_realtime_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Detener an√°lisis en tiempo real"""
        logger.info("‚èπÔ∏è Deteniendo an√°lisis en tiempo real...")
        
        # Cambiar flags
        self.realtime_active = False
        self.realtime_stop_flag = True
        self.current_mode = "menu"
        
        # Cerrar c√°mara si est√° abierta
        if self.camera_capture:
            self.camera_capture.release()
            self.camera_capture = None
        
        # Esperar que termine el hilo
        if self.realtime_thread and self.realtime_thread.is_alive():
            self.realtime_thread.join(timeout=2)
        
        keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.message.reply_text(
            "‚èπÔ∏è **AN√ÅLISIS DETENIDO**\n\n"
            "‚úÖ El an√°lisis en tiempo real ha sido detenido\n"
            "üìπ C√°mara liberada\n"
            "üìä Los datos recopilados han sido guardados\n\n"
            "Puedes reiniciar el an√°lisis cuando gustes.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ An√°lisis en tiempo real detenido correctamente")

    async def _capture_current_frame(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Capturar y enviar frame actual con an√°lisis"""
        try:
            import cv2  # Import necesario para el procesamiento de frames
            import os   # Import para manejo de archivos temporales
            logger.info("üì∏ Solicitud de captura de frame desde Telegram...")
            
            if not self.realtime_active:
                keyboard = [[InlineKeyboardButton("üè† Regresar al Men√∫", callback_data="show_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.message.reply_text(
                    "‚ö†Ô∏è **AN√ÅLISIS NO ACTIVO**\n\n"
                    "El an√°lisis en tiempo real no est√° ejecut√°ndose.\n"
                    "Inicia el an√°lisis para poder capturar frames.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return
            
            # Obtener frame actual de forma thread-safe
            current_frame = None
            with self.frame_lock:
                if self.current_frame is not None:
                    current_frame = self.current_frame.copy()
            
            if current_frame is None:
                keyboard = [[InlineKeyboardButton("üîÑ Reintentar", callback_data="capture_frame"),
                           InlineKeyboardButton("üè† Men√∫", callback_data="show_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.message.reply_text(
                    "‚ö†Ô∏è **NO HAY FRAME DISPONIBLE**\n\n"
                    "El sistema a√∫n no ha capturado ning√∫n frame.\n"
                    "Espera unos segundos e intenta nuevamente.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return
            
            # Procesar frame con an√°lisis completo
            try:
                # Cargar detectores si no est√°n cargados
                from .cam_utils import EmotionDetector
                from .yolo_dog_detector import YoloDogDetector
                
                detector = EmotionDetector("modelo/mejor_modelo_83.h5")
                yolo_detector = YoloDogDetector(confidence_threshold=0.60)
                
                # Detectar perros
                dog_detections = yolo_detector.detect_dogs(current_frame)
                dogs_detected = yolo_detector.is_dog_detected(dog_detections)
                
                # Dibujar detecciones YOLO
                processed_frame = yolo_detector.draw_detections(current_frame, dog_detections)
                
                # An√°lisis de emociones si hay perros
                analysis_text = "üîç **AN√ÅLISIS INSTANT√ÅNEO**\n\n"
                
                if dogs_detected:
                    try:
                        emotion, prob, preds = detector.predict_emotion(processed_frame)
                        
                        # Determinar color y dibujar emoci√≥n en frame
                        color = (0, 255, 0)  # Verde por defecto
                        if emotion in ['angry', 'sad']:
                            color = (0, 0, 255)  # Rojo para negativas
                        elif emotion == 'happy':
                            color = (0, 255, 255)  # Amarillo para feliz
                        
                        # Dibujar emoci√≥n en el frame
                        emotion_text = f'EMOCION: {emotion.upper()} ({prob:.2f})'
                        best_detection = yolo_detector.get_best_dog_region(dog_detections)
                        if best_detection:
                            x, y, w, h = best_detection
                            cv2.putText(processed_frame, emotion_text, (x, y + h + 30), 
                                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                        else:
                            cv2.putText(processed_frame, emotion_text, (50, 120), 
                                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                        
                        # Texto del an√°lisis
                        emoji_map = {"happy": "üòä", "sad": "üò¢", "angry": "üò†", "relaxed": "üòå"}
                        emoji = emoji_map.get(emotion, "üêï")
                        
                        analysis_text += f"üêï **Perros detectados:** {len(dog_detections)}\n"
                        analysis_text += f"{emoji} **Emoci√≥n:** {emotion.upper()}\n"
                        analysis_text += f"üìä **Confianza:** {prob:.1%}\n\n"
                        
                        # Recomendaciones
                        recommendations = self.get_recommendations(emotion)
                        if recommendations:
                            analysis_text += "üí° **Recomendaci√≥n:**\n"
                            analysis_text += recommendations[0] if len(recommendations) > 0 else ""
                        
                    except Exception as e:
                        logger.error(f"Error en an√°lisis de emoci√≥n: {e}")
                        analysis_text += "‚ö†Ô∏è Error analizando emoci√≥n\n"
                        analysis_text += f"üêï **Perros detectados:** {len(dog_detections)}"
                else:
                    analysis_text += "üîç **Estado:** Esperando detecci√≥n de perro\n"
                    analysis_text += "üí° **Tip:** Aseg√∫rate de que tu mascota est√© visible en la c√°mara"
                    
                    # Dibujar mensaje en frame
                    cv2.putText(processed_frame, 'ESPERANDO DETECCION DE PERRO...', 
                               (50, 80), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2)
                
                # Agregar timestamp al frame
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                cv2.putText(processed_frame, f'Captura: {timestamp}', 
                           (10, processed_frame.shape[0] - 10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
                
                # Guardar frame temporalmente
                temp_path = f"temp_capture_{int(time.time())}.jpg"
                cv2.imwrite(temp_path, processed_frame)
                
                # Enviar imagen con an√°lisis
                analysis_text += f"\n‚è∞ **Capturado:** {timestamp}"
                success = self.send_image_with_caption_to_user(temp_path, analysis_text, update.callback_query.message.chat_id)
                
                # Limpiar archivo temporal
                try:
                    os.remove(temp_path)
                except:
                    pass
                
                if success:
                    # Botones de seguimiento
                    keyboard = [
                        [InlineKeyboardButton("üì∏ Capturar Otra", callback_data="capture_frame")],
                        [InlineKeyboardButton("‚è∏Ô∏è Pausar An√°lisis", callback_data="pause_realtime")],
                        [InlineKeyboardButton("üè† Men√∫", callback_data="show_menu")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.callback_query.message.reply_text(
                        "‚úÖ **CAPTURA ENVIADA**\n\n"
                        "üì∏ Frame capturado con an√°lisis completo\n"
                        "üîÑ El an√°lisis en tiempo real contin√∫a\n\n"
                        "Puedes capturar otra imagen cuando gustes.",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    logger.info("üì∏ Frame capturado y enviado exitosamente")
                else:
                    raise Exception("Error enviando imagen")
                    
            except Exception as analysis_error:
                logger.error(f"Error procesando frame: {analysis_error}")
                
                # Enviar frame sin an√°lisis como respaldo
                temp_path = f"temp_simple_{int(time.time())}.jpg"
                cv2.imwrite(temp_path, current_frame)
                
                simple_caption = (
                    "üì∏ **CAPTURA DE C√ÅMARA**\n\n"
                    "‚ö†Ô∏è Frame capturado sin an√°lisis detallado\n"
                    f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    "El sistema contin√∫a funcionando normalmente."
                )
                
                self.send_image_with_caption_to_user(temp_path, simple_caption, update.callback_query.message.chat_id)
                
                try:
                    os.remove(temp_path)
                except:
                    pass
                
                keyboard = [[InlineKeyboardButton("üîÑ Reintentar", callback_data="capture_frame"),
                           InlineKeyboardButton("üè† Men√∫", callback_data="show_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.message.reply_text(
                    "‚ö†Ô∏è **CAPTURA PARCIAL**\n\n"
                    "Se captur√≥ la imagen pero hubo un problema con el an√°lisis.\n"
                    "El sistema sigue funcionando normalmente.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error general en captura de frame: {e}")
            
            keyboard = [[InlineKeyboardButton("üîÑ Reintentar", callback_data="capture_frame"),
                       InlineKeyboardButton("üè† Men√∫", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.message.reply_text(
                "‚ùå **ERROR EN CAPTURA**\n\n"
                "No se pudo capturar el frame actual.\n"
                "Verifica que el an√°lisis est√© ejecut√°ndose correctamente.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    def _get_current_status(self):
        """Obtener estado actual"""
        if not self.emotion_history:
            return (
                "üìä **ESTADO ACTUAL**\n\n"
                "üîç A√∫n no hay datos de an√°lisis\n"
                "Aseg√∫rate de que el sistema est√© detectando a tu mascota.\n\n"
                f"üîî Monitoreo: {'Activo' if self.monitoring_active else 'Pausado'}"
            )
        
        last_emotion = self.emotion_history[-1] if self.emotion_history else "Sin datos"
        recent_emotions = self.emotion_history[-5:] if len(self.emotion_history) >= 5 else self.emotion_history
        
        # Contar emociones recientes
        emotion_counts = {}
        for emotion in recent_emotions:
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
        
        status_text = (
            f"üìä **ESTADO ACTUAL**\n\n"
            f"üéØ √öltima emoci√≥n: **{last_emotion.upper()}**\n"
            f"üìà An√°lisis recientes: {len(recent_emotions)}\n\n"
            f"**Distribuci√≥n reciente:**\n"
        )
        
        for emotion, count in emotion_counts.items():
            percentage = (count / len(recent_emotions)) * 100
            emoji = {"happy": "üòä", "sad": "üò¢", "angry": "üò†", "relaxed": "üòå"}.get(emotion, "üêï")
            status_text += f"{emoji} {emotion.capitalize()}: {count} ({percentage:.0f}%)\n"
        
        status_text += f"\nüîî Monitoreo: {'‚úÖ ACTIVO' if self.monitoring_active else '‚ùå PAUSADO'}"
        status_text += f"\n‚è∞ √öltima actualizaci√≥n: {self._get_current_time()}"
        
        if not self.monitoring_active:
            status_text += f"\n\nüí° *Activa el monitoreo desde el men√∫ para recibir alertas autom√°ticas*"
        
        return status_text

    def _get_daily_summary(self):
        """Obtener resumen del d√≠a"""
        if not self.emotion_history:
            return (
                "üìà **RESUMEN DEL D√çA**\n\n"
                "üìä Sin datos suficientes para generar resumen\n"
                "El sistema comenzar√° a recopilar datos una vez que detecte a tu mascota."
            )
        
        # Contar todas las emociones
        emotion_counts = {}
        for emotion in self.emotion_history:
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
        
        total = len(self.emotion_history)
        dominant_emotion = max(emotion_counts, key=emotion_counts.get)
        
        summary_text = (
            f"üìà **RESUMEN DEL D√çA**\n\n"
            f"üìä Total de an√°lisis: **{total}**\n"
            f"üéØ Emoci√≥n dominante: **{dominant_emotion.upper()}**\n\n"
            f"**Distribuci√≥n completa:**\n"
        )
        
        for emotion, count in sorted(emotion_counts.items()):
            percentage = (count / total) * 100
            emoji = {"happy": "üòä", "sad": "üò¢", "angry": "üò†", "relaxed": "üòå"}.get(emotion, "üêï")
            summary_text += f"{emoji} {emotion.capitalize()}: {count} an√°lisis ({percentage:.1f}%)\n"
        
        # Agregar recomendaci√≥n basada en emoci√≥n dominante
        summary_text += f"\n**Recomendaci√≥n del d√≠a:**\n"
        recommendations = self.get_recommendations(dominant_emotion)
        summary_text += recommendations[0] if recommendations else "Contin√∫a monitoreando"
        
        return summary_text

    def _get_general_tips(self):
        """Obtener consejos generales"""
        return (
            "üí° **CONSEJOS GENERALES PARA TU MASCOTA**\n\n"
            "üèÉ‚Äç‚ôÇÔ∏è **Ejercicio Regular:**\n"
            "‚Ä¢ Paseos diarios adaptados a la edad y raza\n"
            "‚Ä¢ Juegos interactivos en casa\n\n"
            "ü•ó **Alimentaci√≥n:**\n"
            "‚Ä¢ Horarios regulares de comida\n"
            "‚Ä¢ Agua fresca siempre disponible\n\n"
            "‚ù§Ô∏è **Bienestar Emocional:**\n"
            "‚Ä¢ Rutinas consistentes\n"
            "‚Ä¢ Tiempo de calidad juntos\n"
            "‚Ä¢ Ambiente tranquilo para descansar\n\n"
            "üè• **Salud:**\n"
            "‚Ä¢ Visitas regulares al veterinario\n"
            "‚Ä¢ Atenci√≥n a cambios de comportamiento\n\n"
            "üì± Este sistema te ayuda a monitorear el estado emocional y detectar patrones que podr√≠an requerir atenci√≥n."
        )

    def get_recommendations(self, emotion):
        """Obtiene recomendaciones espec√≠ficas para cada emoci√≥n"""
        return self.recommendations.get(emotion, ["Monitoreando el estado de tu mascota..."])

    def update_emotion_history(self, emotion):
        """Actualizar historial de emociones"""
        self.emotion_history.append(emotion)
        # Mantener solo las √∫ltimas 200 emociones para an√°lisis m√°s completo
        if len(self.emotion_history) > 200:
            self.emotion_history.pop(0)

    def send_image_with_caption(self, image_path, caption):
        """Env√≠a una imagen con texto usando requests"""
        try:
            logger.info(f"üì∏ Enviando imagen: {image_path}")
            
            url = f"https://api.telegram.org/bot{self.token}/sendPhoto"
            
            with open(image_path, 'rb') as photo:
                files = {'photo': photo}
                data = {
                    'chat_id': self.chat_id,
                    'caption': caption,
                    'parse_mode': 'Markdown'
                }
                
                response = requests.post(url, files=files, data=data, timeout=15)
                
                if response.status_code == 200:
                    logger.info("‚úÖ Imagen enviada exitosamente")
                    return True
                else:
                    logger.error(f"‚ùå Error enviando imagen: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error enviando imagen: {e}")
            return False

    def send_image_with_caption_to_user(self, image_path, caption, target_chat_id):
        """Env√≠a una imagen con texto a un chat espec√≠fico (multiusuario)"""
        try:
            logger.info(f"üì∏ Enviando imagen a chat {target_chat_id}: {image_path}")
            
            url = f"https://api.telegram.org/bot{self.token}/sendPhoto"
            
            with open(image_path, 'rb') as photo:
                files = {'photo': photo}
                data = {
                    'chat_id': target_chat_id,  # Chat espec√≠fico del usuario
                    'caption': caption,
                    'parse_mode': 'Markdown'
                }
                
                response = requests.post(url, files=files, data=data, timeout=15)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Imagen enviada exitosamente a chat {target_chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå Error enviando imagen a chat {target_chat_id}: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error enviando imagen a chat {target_chat_id}: {e}")
            return False

    def send_alert(self, emotion, probability, image_path=None):
        """Env√≠a alerta con recomendaciones personalizadas"""
        try:
            logger.info(f"üö® SEND_ALERT LLAMADO: emotion={emotion}, prob={probability:.3f}, image_path={image_path}")
            logger.info(f"üîç Estado del monitoreo: {self.monitoring_active}")
            
            # Solo enviar si el monitoreo est√° activo
            if not self.monitoring_active:
                logger.warning("‚ö†Ô∏è Alerta no enviada - Monitoreo pausado")
                return False
                
            logger.info("‚úÖ Monitoreo activo - Procesando alerta...")
            
            recommendations = self.get_recommendations(emotion)
            
            # Crear mensaje personalizado
            message = f"üêï **ALERTA DE COMPORTAMIENTO**\n\n"
            message += f"Emoci√≥n detectada: **{emotion.upper()}** ({probability:.2f})\n"
            message += f"Detectado repetidamente en los √∫ltimos an√°lisis.\n\n"
            message += "\n".join(recommendations)
            message += f"\n\nüìä Confianza: {probability*100:.1f}%"
            message += f"\n‚è∞ Hora: {self._get_current_time()}"
            
            # PRIORIDAD 1: Si hay imagen, enviarla con el mensaje completo
            if image_path and os.path.exists(image_path):
                logger.info("üì∏ Enviando alerta CON IMAGEN...")
                success = self.send_image_with_caption(image_path, message)
                
                if success:
                    logger.info("üéâ Alerta con imagen enviada exitosamente")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Fall√≥ env√≠o con imagen, enviando mensaje sin imagen...")
            
            # PRIORIDAD 2: Enviar mensaje usando m√©todo directo (m√°s confiable)
            logger.info("üìù Enviando alerta con m√©todo directo...")
            try:
                url = f"https://api.telegram.org/bot{self.token}/sendMessage"
                data = {
                    'chat_id': self.chat_id,
                    'text': message,
                    'parse_mode': 'Markdown'
                }
                
                response = requests.post(url, json=data, timeout=10)
                
                if response.status_code == 200:
                    logger.info("üéâ Alerta enviada exitosamente con m√©todo directo")
                    return True
                else:
                    logger.error(f"‚ùå Error HTTP en m√©todo directo: {response.status_code}")
                    raise Exception(f"HTTP Error: {response.status_code}")
                    
            except Exception as direct_error:
                logger.error(f"‚ùå Error en m√©todo directo: {direct_error}")
                
                # Respaldo ultra-simple
                logger.info("üì± Intentando mensaje de respaldo...")
                fallback_msg = f"üö® ALERTA: Tu perro est√° {emotion.upper()} (confianza: {probability:.2f})"
                
                try:
                    fallback_data = {
                        'chat_id': self.chat_id,
                        'text': fallback_msg
                    }
                    
                    fallback_response = requests.post(url, json=fallback_data, timeout=10)
                    
                    if fallback_response.status_code == 200:
                        logger.info("üì± Mensaje de respaldo enviado exitosamente")
                        return True
                    else:
                        logger.error("‚ùå Fall√≥ incluso el mensaje de respaldo")
                        return False
                        
                except Exception as fallback_error:
                    logger.error(f"‚ùå Error en respaldo: {fallback_error}")
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå Error general enviando alerta: {e}")
            return False

    def send_status_update(self, emotion_history=None):
        """Env√≠a un resumen del estado emocional reciente"""
        try:
            if not self.monitoring_active:
                return
                
            history_to_use = emotion_history or self.emotion_history
            if not history_to_use:
                return
                
            # Contar emociones
            emotion_counts = {}
            for emotion in history_to_use:
                emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
            
            message = "üìä **ACTUALIZACI√ìN DE ESTADO**\n\n"
            for emotion, count in emotion_counts.items():
                percentage = (count / len(history_to_use)) * 100
                emoji = {"happy": "üòä", "sad": "üò¢", "angry": "üò†", "relaxed": "üòå"}.get(emotion, "üêï")
                message += f"{emoji} {emotion.capitalize()}: {count} veces ({percentage:.1f}%)\n"
            
            message += f"\nüìà Total de an√°lisis: {len(history_to_use)}"
            message += f"\n‚è∞ Actualizaci√≥n: {self._get_current_time()}"
            
            # Usar m√©todo as√≠ncrono manejado de forma s√≠ncrona
            import asyncio
            import threading
            
            # Variable para almacenar el resultado
            status_result = {'success': False, 'error': None}
            
            async def _send_status_async():
                """Funci√≥n async interna para env√≠o de estado"""
                try:
                    await self.bot.send_message(
                        chat_id=self.chat_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    logger.info("Resumen de estado enviado")
                    status_result['success'] = True
                except Exception as e:
                    status_result['error'] = e
                    logger.error(f"‚ùå Error en env√≠o async de estado: {e}")
            
            def _run_status():
                """Ejecutar env√≠o de estado en nuevo event loop"""
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(_send_status_async())
                except Exception as e:
                    status_result['error'] = e
                    logger.error(f"‚ùå Error en loop de estado: {e}")
                finally:
                    try:
                        loop.close()
                    except:
                        pass
            
            # Ejecutar en hilo separado
            status_thread = threading.Thread(target=_run_status)
            status_thread.start()
            status_thread.join(timeout=10)  # Timeout de 10 segundos
            
            if status_thread.is_alive():
                logger.error("‚ùå Timeout enviando estado")
                return
            
            if not status_result['success'] and status_result['error']:
                raise status_result['error']
            
        except Exception as e:
            logger.error(f"Error enviando resumen: {e}")

    def send_welcome_message(self):
        """Enviar mensaje de bienvenida al iniciar el sistema"""
        try:
            logger.info("üì® Enviando mensaje de bienvenida...")
            
            welcome_text = (
                "üöÄ **¬°Sistema de Monitoreo Iniciado!**\n\n"
                "üêï Monitor de Emociones Caninas est√° activo\n"
                "üì± Usa /menu para acceder a todas las funciones\n\n"
                "El sistema comenzar√° a analizar a tu mascota autom√°ticamente.\n"
                "Recibir√°s alertas si se detectan patrones preocupantes.\n\n"
                "‚ö†Ô∏è **IMPORTANTE**: Si no recibes alertas, revisa:\n"
                "‚Ä¢ Que el monitoreo est√© activado desde /menu\n"
                "‚Ä¢ Que las notificaciones de Telegram est√©n habilitadas"
            )
            
            # Env√≠o as√≠ncrono manejado de forma s√≠ncrona
            import asyncio
            import threading
            
            # Variable para almacenar el resultado
            welcome_result = {'success': False, 'error': None, 'message_id': None}
            
            async def _send_welcome_async():
                """Funci√≥n async interna para env√≠o de bienvenida"""
                try:
                    result = await self.bot.send_message(
                        chat_id=self.chat_id,
                        text=welcome_text,
                        parse_mode='Markdown'
                    )
                    logger.info(f"‚úÖ Mensaje de bienvenida enviado - ID: {result.message_id}")
                    welcome_result['success'] = True
                    welcome_result['message_id'] = result.message_id
                except Exception as e:
                    welcome_result['error'] = e
                    logger.error(f"‚ùå Error en env√≠o async de bienvenida: {e}")
            
            def _run_welcome():
                """Ejecutar env√≠o de bienvenida en nuevo event loop"""
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(_send_welcome_async())
                except Exception as e:
                    welcome_result['error'] = e
                    logger.error(f"‚ùå Error en loop de bienvenida: {e}")
                finally:
                    try:
                        loop.close()
                    except:
                        pass
            
            # Ejecutar en hilo separado
            welcome_thread = threading.Thread(target=_run_welcome)
            welcome_thread.start()
            welcome_thread.join(timeout=10)  # Timeout de 10 segundos
            
            if welcome_thread.is_alive():
                logger.error("‚ùå Timeout enviando bienvenida")
                return
            
            if not welcome_result['success'] and welcome_result['error']:
                raise welcome_result['error']
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje de bienvenida: {e}")
            logger.error(f"‚ùå Tipo de error: {type(e).__name__}")
            logger.error(f"‚ùå Detalles: {str(e)}")

    def test_connection(self):
        """Probar conexi√≥n de Telegram"""
        try:
            logger.info("üß™ Iniciando test de conexi√≥n...")
            
            # Usar asyncio para manejar m√©todos as√≠ncronos
            import asyncio
            import time
            import threading
            
            # Variable para almacenar el resultado
            test_result = {'success': False, 'error': None, 'message_id': None}
            
            async def _test_async():
                """Funci√≥n async interna para el test"""
                try:
                    start_time = time.time()
                    
                    # Verificar bot de forma as√≠ncrona
                    bot_info = await self.bot.get_me()
                    verification_time = time.time() - start_time
                    logger.info(f"ü§ñ Bot encontrado: {bot_info.username} ({bot_info.first_name}) - {verification_time:.2f}s")
                    
                    # Probar env√≠o de mensaje
                    start_time = time.time()
                    test_message = "üß™ **Test de Conexi√≥n**\n\nSi recibes este mensaje, Telegram funciona correctamente."
                    
                    result = await self.bot.send_message(
                        chat_id=self.chat_id,
                        text=test_message,
                        parse_mode='Markdown'
                    )
                    
                    send_time = time.time() - start_time
                    logger.info(f"‚úÖ Test de Telegram exitoso - Mensaje ID: {result.message_id} - {send_time:.2f}s")
                    
                    test_result['success'] = True
                    test_result['message_id'] = result.message_id
                    
                except Exception as e:
                    test_result['error'] = e
                    logger.error(f"‚ùå Error en test async: {e}")
            
            def _run_test():
                """Ejecutar test en nuevo event loop"""
                try:
                    # Crear un loop completamente nuevo para este hilo
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    # Ejecutar el test
                    loop.run_until_complete(_test_async())
                    
                except Exception as e:
                    test_result['error'] = e
                    logger.error(f"‚ùå Error en loop: {e}")
                finally:
                    try:
                        loop.close()
                    except:
                        pass
            
            # Ejecutar en hilo separado para evitar conflictos con otros loops
            test_thread = threading.Thread(target=_run_test)
            test_thread.start()
            test_thread.join(timeout=15)  # Timeout de 15 segundos
            
            if test_thread.is_alive():
                logger.error("‚ùå Test timeout - El test tard√≥ m√°s de 15 segundos")
                return False
            
            if test_result['success']:
                logger.info(f"‚úÖ Test completado exitosamente - ID: {test_result['message_id']}")
                return True
            elif test_result['error']:
                raise test_result['error']
            else:
                logger.error("‚ùå Test fall√≥ sin error espec√≠fico")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå Test de Telegram fall√≥: {e}")
            logger.error(f"‚ùå Tipo de error: {type(e).__name__}")
            logger.error(f"‚ùå Detalles: {str(e)}")
            
            # Informaci√≥n adicional para diagn√≥stico
            logger.error(f"üîç Chat ID usado: {self.chat_id}")
            logger.error(f"üîç Token (primeros 10 chars): {self.token[:10]}...")
            
            return False

    def send_periodic_update(self):
        """Enviar actualizaci√≥n peri√≥dica (cada 30 minutos)"""
        import time
        current_time = time.time()
        
        # Solo enviar si han pasado al menos 30 minutos desde la √∫ltima actualizaci√≥n
        if current_time - self.last_status_time > 1800:  # 30 minutos
            if self.emotion_history and self.monitoring_active:
                self.send_status_update()
                self.last_status_time = current_time

    def send_video_summary(self, video_stats):
        """Env√≠a un resumen completo del an√°lisis de video"""
        try:
            logger.info(f"üîç Iniciando env√≠o de resumen. Stats recibidas: {video_stats}")
            
            # Validar que tenemos stats v√°lidas
            if not video_stats or not isinstance(video_stats, dict):
                logger.error(f"‚ùå Stats inv√°lidas: {video_stats}")
                self.send_simple_message_plain("‚ùå Error: No se pudieron generar estad√≠sticas v√°lidas del an√°lisis.")
                return False
            
            # Extraer informaci√≥n de las estad√≠sticas
            video_name = video_stats.get('video_name', 'Video analizado')
            total_detections = video_stats.get('total_emotions', 0)
            dominant_emotion = video_stats.get('dominant_emotion', 'No detectado')
            emotion_distribution = video_stats.get('emotion_distribution', {})
            confidence_avg = video_stats.get('confidence_avg', 0.0)
            frames_processed = video_stats.get('frames_processed', 0)
            dog_detection_rate = video_stats.get('dog_detection_rate', 0.0)
            processing_speed = video_stats.get('processing_speed', 0.0)
            output_file = video_stats.get('output_file', None)
            
            logger.info(f"üìä Datos extra√≠dos - Video: {video_name}, Detecciones: {total_detections}, Emoci√≥n dominante: {dominant_emotion}")
            
            # Crear mensaje principal
            mensaje = f"""üé¨ AN√ÅLISIS DE VIDEO COMPLETADO

üìÅ Video: {video_name}
üîç Detecciones totales: {total_detections}

üéØ Emoci√≥n dominante: {dominant_emotion.upper()}

üìä Distribuci√≥n:"""
            
            logger.info(f"üìù Mensaje base creado. Distribuci√≥n emocional: {emotion_distribution}")
            
            # Agregar distribuci√≥n con emojis y barras de progreso
            emotion_emojis = {
                'happy': 'üòä',
                'relaxed': 'üòå', 
                'sad': 'üò¢',
                'angry': 'üò†'
            }
            
            total_emotions = sum(emotion_distribution.values()) if emotion_distribution else 1
            logger.info(f"üßÆ Total emociones para c√°lculo: {total_emotions}")
            
            for emotion, count in emotion_distribution.items():
                if count > 0:
                    percentage = (count / total_emotions) * 100
                    emoji = emotion_emojis.get(emotion, 'üêï')
                    
                    # Crear barra visual simple
                    bar_length = int(percentage / 10)  # Cada 10% = 1 cuadrado
                    bar = '‚ñà' * bar_length + '‚ñë' * (10 - bar_length)
                    
                    mensaje += f"\n{emoji} {emotion.upper()}: {count} ({percentage:.0f}%) {bar}"
                    logger.info(f"‚ûï Agregada emoci√≥n: {emotion} - {count} veces ({percentage:.0f}%)")
            
            # Agregar estad√≠sticas t√©cnicas
            mensaje += f"\n\nüìà Estad√≠sticas:"
            mensaje += f"\nüìä Confianza promedio: {confidence_avg:.2f}"
            mensaje += f"\n‚è±Ô∏è Frames procesados: {frames_processed}"
            mensaje += f"\nüêï Detecci√≥n de perros: {dog_detection_rate:.1f}%"
            mensaje += f"\n‚ö° Velocidad: {processing_speed:.1f} FPS"
            
            logger.info("üìà Estad√≠sticas t√©cnicas agregadas al mensaje")
            
            # Agregar recomendaciones
            recommendations = {
                'happy': "¬°Excelente! Tu perro muestra signos de felicidad. üéâ\n‚Ä¢ Contin√∫a con las actividades que lo hacen feliz\n‚Ä¢ Es un buen momento para entrenamientos positivos",
                'relaxed': "Perfecto estado de relajaci√≥n. üòå\n‚Ä¢ Mant√©n el ambiente tranquilo\n‚Ä¢ Tu perro est√° en su zona de confort",
                'sad': "Se detect√≥ tristeza en tu mascota. üíô\n‚Ä¢ Dedica m√°s tiempo de calidad juntos\n‚Ä¢ Verifica que no haya molestias f√≠sicas\n‚Ä¢ Considera actividades estimulantes",
                'angry': "Signos de estr√©s o molestia detectados. ‚ù§Ô∏è\n‚Ä¢ Identifica posibles fuentes de estr√©s\n‚Ä¢ Proporciona un espacio tranquilo\n‚Ä¢ Si persiste, consulta al veterinario"
            }
            
            recommendation = recommendations.get(dominant_emotion.lower(), "Contin√∫a monitoreando el bienestar de tu mascota.")
            mensaje += f"\n\nüí° Recomendaci√≥n:\n{recommendation}"
            
            logger.info(f"üí° Recomendaci√≥n agregada para emoci√≥n: {dominant_emotion.lower()}")
            
            # Informaci√≥n del archivo guardado
            if output_file:
                mensaje += f"\n\nüíæ Video procesado guardado:\n{os.path.basename(output_file)}"
                logger.info(f"üíæ Info de archivo agregada: {os.path.basename(output_file)}")
            
            # Agregar timestamp
            from datetime import datetime
            timestamp = datetime.now().strftime("%d/%m/%Y %H:%M")
            mensaje += f"\n\nüïê An√°lisis completado: {timestamp}"
            
            logger.info(f"üì§ Enviando mensaje completo ({len(mensaje)} caracteres)")
            
            # Enviar mensaje sin Markdown para evitar errores de parsing
            success = self.send_simple_message_plain(mensaje)
            
            if success:
                logger.info("‚úÖ Resumen de video enviado por Telegram exitosamente")
            else:
                logger.error("‚ùå Error al enviar resumen por Telegram")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando resumen de video: {e}")
            return False

    def send_simple_message_plain(self, text):
        """Enviar mensaje simple sin formato Markdown usando requests"""
        try:
            logger.info(f"üì± Enviando mensaje plain ({len(text)} caracteres): {text[:50]}...")
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': text
            }
            
            logger.info(f"üåê URL: {url}")
            logger.info(f"üìä Chat ID: {self.chat_id}")
            
            response = requests.post(url, json=data, timeout=15)
            
            logger.info(f"üì° Response status: {response.status_code}")
            
            if response.status_code == 200:
                logger.info("‚úÖ Mensaje plain enviado exitosamente")
                response_data = response.json()
                logger.info(f"üì¨ Message ID: {response_data.get('result', {}).get('message_id', 'N/A')}")
                return True
            else:
                logger.error(f"‚ùå Error HTTP enviando mensaje plain: {response.status_code}")
                logger.error(f"‚ùå Response text: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje plain: {e}")
            logger.error(f"‚ùå Exception type: {type(e).__name__}")
            return False

    def send_simple_message(self, text):
        """Enviar mensaje simple de forma s√≠ncrona usando requests"""
        try:
            logger.info(f"üì± Enviando mensaje: {text[:50]}...")
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, json=data, timeout=15)
            
            if response.status_code == 200:
                logger.info("‚úÖ Mensaje enviado exitosamente")
                return True
            else:
                logger.error(f"‚ùå Error HTTP enviando mensaje: {response.status_code} - {response.text}")
                # Si falla con Markdown, intentar sin formato
                logger.info("üîÑ Reintentando sin formato Markdown...")
                data_plain = {
                    'chat_id': self.chat_id,
                    'text': text
                }
                response_plain = requests.post(url, json=data_plain, timeout=15)
                if response_plain.status_code == 200:
                    logger.info("‚úÖ Mensaje enviado sin formato")
                    return True
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje: {e}")
            return False

    async def _handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar videos enviados por el usuario"""
        try:
            logger.info("üìé Video recibido desde Telegram")
            
            # Enviar mensaje de confirmaci√≥n
            await update.message.reply_text(
                "üé¨ **Video recibido**\n\n"
                "‚è≥ Descargando y procesando tu video...\n"
                "üìä Esto puede tomar algunos minutos dependiendo del tama√±o.\n\n"
                "üêï Estoy analizando las emociones de tu mascota...",
                parse_mode='Markdown'
            )
            
            video = update.message.video
            
            # Verificar tama√±o del video (m√°ximo 20MB)
            if video.file_size > 20 * 1024 * 1024:  # 20MB
                await update.message.reply_text(
                    "‚ùå **Video muy grande**\n\n"
                    "El video es demasiado grande (m√°ximo 20MB).\n"
                    "Por favor, env√≠a un video m√°s corto o comprimido.",
                    parse_mode='Markdown'
                )
                return
            
            # Crear nombre de archivo √∫nico
            import time
            timestamp = int(time.time())
            video_filename = f"telegram_video_{timestamp}.mp4"
            video_path = os.path.join(os.getcwd(), video_filename)
            
            # Descargar el video
            file = await context.bot.get_file(video.file_id)
            await file.download_to_drive(video_path)
            
            logger.info(f"üì• Video descargado: {video_path}")
            
            # Enviar actualizaci√≥n de progreso
            await update.message.reply_text(
                "‚úÖ **Video descargado**\n\n"
                "üß† Iniciando an√°lisis de IA...\n"
                "üîç Detectando perros y analizando emociones...",
                parse_mode='Markdown'
            )
            
            # Procesar el video en un hilo separado para no bloquear
            import threading
            processing_thread = threading.Thread(
                target=self._process_video_thread,
                args=(video_path, update.message.chat_id, timestamp)
            )
            processing_thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå Error manejando video: {e}")
            await update.message.reply_text(
                "‚ùå **Error procesando video**\n\n"
                "Hubo un problema al procesar tu video.\n"
                "Por favor, intenta nuevamente con un video diferente.",
                parse_mode='Markdown'
            )

    def _process_video_thread(self, video_path, chat_id, timestamp):
        """Procesar video en hilo separado"""
        try:
            # Importar las clases necesarias
            from .cam_utils import EmotionDetector
            from .yolo_dog_detector import YoloDogDetector
            import cv2
            
            logger.info("üß† Cargando modelos de IA...")
            
            # Inicializar detectores
            detector = EmotionDetector("modelo/mejor_modelo_83.h5")
            yolo_detector = YoloDogDetector(confidence_threshold=0.60)
            
            # Nombre del archivo de salida
            output_filename = f"telegram_processed_{timestamp}.mp4"
            output_path = os.path.join(os.getcwd(), output_filename)
            
            logger.info(f"üé¨ Procesando video: {video_path}")
            
            # Procesar el video usando la funci√≥n existente
            success = self._process_video_for_telegram(
                video_path, output_path, detector, yolo_detector, chat_id
            )
            
            if success:
                # Enviar video procesado y resumen
                self._send_processed_video_results(output_path, chat_id, timestamp)
            else:
                # Enviar mensaje de error
                asyncio.run(self._send_error_message(chat_id))
            
        except Exception as e:
            logger.error(f"‚ùå Error en hilo de procesamiento: {e}")
            asyncio.run(self._send_error_message(chat_id))
        finally:
            # Limpiar archivos temporales
            try:
                if os.path.exists(video_path):
                    os.remove(video_path)
                    logger.info(f"üßπ Archivo temporal eliminado: {video_path}")
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è Error limpiando archivo temporal: {cleanup_error}")

    def _process_video_for_telegram(self, input_path, output_path, detector, yolo_detector, chat_id):
        """Procesar video espec√≠ficamente para Telegram usando procesador limpio"""
        try:
            logger.info("üé¨ Usando procesador de video optimizado...")
            
            # Importar y usar el procesador limpio
            import sys
            import os
            sys.path.append(os.path.dirname(os.path.dirname(__file__)))
            
            from procesar_video import process_video
            
            # Procesar video con el sistema limpio
            stats = process_video(
                video_path=input_path,
                output_path=output_path,
                show_video=False,  # No mostrar ventana en modo Telegram
                save_video=True    # Siempre guardar para Telegram
            )
            
            if stats and stats.get('emotions_detected', 0) > 0:
                # Guardar estad√≠sticas para el resumen
                self._current_video_stats = {
                    'video_name': stats.get('video_name', os.path.basename(input_path)),
                    'total_emotions': stats.get('emotions_detected', 0),
                    'emotion_distribution': stats.get('emotion_distribution', {}),
                    'dominant_emotion': stats.get('dominant_emotion', 'no_detected'),
                    'confidence_avg': stats.get('confidence_avg', 0.75),
                    'frames_processed': stats.get('total_frames', 0),
                    'dog_detection_rate': stats.get('dog_detection_rate', 0.0),
                    'processing_speed': stats.get('fps_processed', 0.0),
                    'output_file': stats.get('output_file', output_path)
                }
                
                logger.info(f"‚úÖ Video procesado exitosamente: {output_path}")
                return True
            else:
                logger.warning("‚ö†Ô∏è No se detectaron emociones en el video")
                
                # Crear stats b√°sicos para casos sin detecci√≥n
                self._current_video_stats = {
                    'video_name': stats.get('video_name', os.path.basename(input_path)) if stats else os.path.basename(input_path),
                    'total_emotions': 0,
                    'emotion_distribution': {},
                    'dominant_emotion': 'no_detected',
                    'confidence_avg': 0.0,
                    'frames_processed': stats.get('total_frames', 0) if stats else 0,
                    'dog_detection_rate': 0.0,
                    'processing_speed': stats.get('fps_processed', 0.0) if stats else 0.0,
                    'output_file': output_path
                }
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Error procesando video: {e}")
            return False

    async def _send_progress_update(self, chat_id, progress):
        """Enviar actualizaci√≥n de progreso"""
        try:
            if progress % 25 == 0:  # Solo enviar cada 25%
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚è≥ **Progreso:** {progress:.0f}% completado",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"Error enviando progreso: {e}")

    async def _send_error_message(self, chat_id):
        """Enviar mensaje de error"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text="‚ùå **Error procesando video**\n\n"
                     "Hubo un problema durante el an√°lisis.\n"
                     "Por favor, intenta con otro video.",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error enviando mensaje de error: {e}")

    def _send_processed_video_results(self, output_path, chat_id, timestamp):
        """Enviar video procesado y resumen"""
        try:
            logger.info(f"üì§ Enviando resultados al chat {chat_id}...")
            
            # **IMPORTANTE: Usar el chat_id del usuario, no el del bot**
            original_chat_id = self.chat_id  # Guardar el original
            self.chat_id = chat_id  # Cambiar temporalmente al chat del usuario
            
            # Enviar video procesado
            video_sent = self._send_video_file(chat_id, output_path)
            logger.info(f"üìπ Video enviado: {'‚úÖ √âxito' if video_sent else '‚ùå Error'}")
            
            # Verificar si tenemos estad√≠sticas para el resumen
            if hasattr(self, '_current_video_stats'):
                logger.info(f"üìä Estad√≠sticas encontradas: {self._current_video_stats}")
                logger.info("üìù Enviando resumen de video...")
                summary_sent = self.send_video_summary(self._current_video_stats)
                logger.info(f"üìÑ Resumen enviado: {'‚úÖ √âxito' if summary_sent else '‚ùå Error'}")
            else:
                logger.error("‚ùå No se encontraron estad√≠sticas del video (_current_video_stats)")
                # Enviar mensaje de error al usuario
                self.send_simple_message_plain("‚ùå Error: No se pudieron generar las estad√≠sticas del an√°lisis.")
            
            # Enviar mensaje final con opciones de navegaci√≥n
            self._send_completion_message(chat_id)
            
            # **IMPORTANTE: Restaurar el chat_id original**
            self.chat_id = original_chat_id
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando resultados: {e}")
            # Enviar mensaje de error al usuario usando el chat_id correcto
            original_chat_id = self.chat_id
            self.chat_id = chat_id
            self.send_simple_message_plain(f"‚ùå Error enviando resultados: {str(e)[:100]}...")
            self.chat_id = original_chat_id
        finally:
            # Limpiar archivo procesado
            try:
                if os.path.exists(output_path):
                    os.remove(output_path)
                    logger.info(f"üßπ Archivo procesado eliminado: {output_path}")
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è Error limpiando archivo procesado: {cleanup_error}")

    def _send_completion_message(self, chat_id):
        """Enviar mensaje de finalizaci√≥n con opciones de navegaci√≥n"""
        try:
            import requests
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            
            # Crear botones de navegaci√≥n
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üé¨ Analizar Otro Video", "callback_data": "video_analysis"},
                        {"text": "üìπ An√°lisis en Tiempo Real", "callback_data": "realtime_analysis"}
                    ],
                    [
                        {"text": "üìä Ver Estado", "callback_data": "status"},
                        {"text": "üè† Regresar al Men√∫", "callback_data": "show_menu"}
                    ]
                ]
            }
            
            data = {
                'chat_id': chat_id,
                'text': "‚úÖ **AN√ÅLISIS COMPLETADO**\n\nüéâ Tu video ha sido procesado exitosamente\nüì± ¬øQu√© te gustar√≠a hacer ahora?",
                'parse_mode': 'Markdown',
                'reply_markup': str(keyboard).replace("'", '"')
            }
            
            response = requests.post(url, json=data, timeout=15)
            if response.status_code == 200:
                logger.info("‚úÖ Mensaje de finalizaci√≥n enviado")
            else:
                logger.error(f"‚ùå Error enviando mensaje de finalizaci√≥n: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje de finalizaci√≥n: {e}")

    def _send_video_file(self, chat_id, video_path):
        """Enviar archivo de video por Telegram usando requests"""
        try:
            # Verificar que el archivo existe y no est√° vac√≠o
            if not os.path.exists(video_path) or os.path.getsize(video_path) == 0:
                logger.error(f"‚ùå Video no v√°lido: {video_path}")
                self.send_simple_message_plain("‚ùå Error: El video procesado est√° vac√≠o o no se gener√≥ correctamente.")
                return False
            
            # Enviar mensaje de que se est√° enviando
            self.send_simple_message_plain("üì§ Enviando video analizado...\n\nüé¨ Tu video con an√°lisis de emociones est√° listo.")
            
            # Enviar el video usando requests
            logger.info(f"üìπ Enviando video: {video_path}")
            
            url = f"https://api.telegram.org/bot{self.token}/sendVideo"
            
            with open(video_path, 'rb') as video_file:
                files = {'video': video_file}
                data = {
                    'chat_id': chat_id,
                    'caption': "üé¨ Video Analizado\n\n‚úÖ An√°lisis de emociones completado\nüêï Detecciones YOLO superpuestas\nüìä Resumen detallado a continuaci√≥n"
                }
                
                response = requests.post(url, files=files, data=data, timeout=300)  # 5 minutos timeout
                
                if response.status_code == 200:
                    logger.info("‚úÖ Video enviado exitosamente por Telegram")
                    return True
                else:
                    logger.error(f"‚ùå Error HTTP enviando video: {response.status_code} - {response.text}")
                    self.send_simple_message_plain(f"‚ùå Error enviando video\n\nNo se pudo enviar el video procesado.\nC√≥digo de error: {response.status_code}")
                    return False
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando video: {e}")
            self.send_simple_message_plain(f"‚ùå Error enviando video\n\nNo se pudo enviar el video procesado.\nError: {str(e)[:100]}...")
            return False

    def _get_emotion_distribution(self, emotion_history):
        """Calcular distribuci√≥n de emociones"""
        distribution = {}
        for emotion in emotion_history:
            distribution[emotion] = distribution.get(emotion, 0) + 1
        return distribution

    def _get_dominant_emotion(self, emotion_history):
        """Obtener emoci√≥n dominante"""
        if not emotion_history:
            return "No detectado"
        
        distribution = self._get_emotion_distribution(emotion_history)
        return max(distribution.items(), key=lambda x: x[1])[0] if distribution else "No detectado"

    def _get_current_time(self):
        """Obtiene la hora actual formateada"""
        return datetime.now().strftime("%H:%M:%S")

    def cleanup(self):
        """Limpiar recursos del bot de forma simple"""
        try:
            logger.info("üõë Deteniendo bot de Telegram...")
            
            # Simplemente marcar como no ejecut√°ndose y cerrar
            if self.application:
                try:
                    # Parar de forma simple sin asyncio
                    if hasattr(self.application, 'stop_running'):
                        self.application.stop_running()
                    else:
                        logger.info("‚ÑπÔ∏è M√©todo stop_running no disponible, usando limpieza manual")
                except Exception as e:
                    # Error esperado en algunos casos, no es cr√≠tico
                    logger.debug(f"‚ö†Ô∏è Info en stop_running: {e}")
                
                # Marcar como None para evitar m√°s operaciones
                self.application = None
            
            # Marcar bot thread como terminado
            if self.bot_thread and self.bot_thread.is_alive():
                try:
                    # Dar tiempo para que termine naturalmente
                    self.bot_thread.join(timeout=2)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error esperando hilo: {e}")
            
            logger.info("‚úÖ Bot de Telegram cerrado correctamente")
                
        except Exception as e:
            logger.error(f"‚ùå Error cerrando bot: {e}")
            # Si todo falla, al menos marcar como None
            self.application = None
