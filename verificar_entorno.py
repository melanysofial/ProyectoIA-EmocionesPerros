#!/usr/bin/env python3
"""
Script de verificaci√≥n del entorno
Comprueba que todo est√© configurado correctamente antes de ejecutar el sistema principal
"""

import sys
import os
from pathlib import Path

def check_python_version():
    """Verificar versi√≥n de Python"""
    print("üêç Verificando Python...")
    if sys.version_info < (3, 8):
        print(f"‚ùå Python {sys.version_info.major}.{sys.version_info.minor} no es compatible")
        print("   Requiere Python 3.8 o superior")
        return False
    else:
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} - Compatible")
        return True

def check_dependencies():
    """Verificar dependencias instaladas"""
    print("\nüì¶ Verificando dependencias...")
    
    required_packages = [
        'cv2', 'numpy', 'tensorflow', 'ultralytics', 'requests', 'PIL'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'cv2':
                import cv2
            elif package == 'numpy':
                import numpy
            elif package == 'tensorflow':
                import tensorflow
            elif package == 'ultralytics':
                import ultralytics
            elif package == 'requests':
                import requests
            elif package == 'PIL':
                from PIL import Image
            print(f"‚úÖ {package} - Instalado")
        except ImportError:
            print(f"‚ùå {package} - NO instalado")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Paquetes faltantes: {', '.join(missing_packages)}")
        print("Ejecuta: pip install -r requirements.txt")
        return False
    
    return True

def check_project_structure():
    """Verificar estructura del proyecto"""
    print("\nüìÅ Verificando estructura del proyecto...")
    
    project_root = Path(__file__).parent
    
    required_files = [
        "main.py",
        "config.py",
        "requirements.txt",
        "modelo/mejor_modelo_83.h5",
        "utils/cam_utils.py",
        "utils/telegram_utils.py",
        "utils/yolo_dog_detector.py"
    ]
    
    missing_files = []
    
    for file_path in required_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - NO encontrado")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è Archivos faltantes: {', '.join(missing_files)}")
        return False
    
    return True

def check_config():
    """Verificar configuraci√≥n"""
    print("\n‚öôÔ∏è Verificando configuraci√≥n...")
    
    try:
        from config import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID
        
        if TELEGRAM_TOKEN.startswith("7668982184:"):
            print("‚úÖ Token de Telegram configurado correctamente")
        else:
            print("‚ùå Token de Telegram incorrecto")
            return False
        
        if TELEGRAM_CHAT_ID == "1673887715":
            print("‚ö†Ô∏è Usando Chat ID por defecto - Configura el tuyo en config.py")
        else:
            print(f"‚úÖ Chat ID personalizado configurado: {TELEGRAM_CHAT_ID}")
        
        return True
        
    except ImportError:
        print("‚ùå Archivo config.py no encontrado o configuraci√≥n incorrecta")
        return False

def check_camera():
    """Verificar c√°mara disponible"""
    print("\nüìπ Verificando c√°mara...")
    
    try:
        import cv2
        
        # Probar c√°maras del 0 al 2
        for i in range(3):
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret and frame is not None:
                    print(f"‚úÖ C√°mara {i} disponible: {frame.shape[1]}x{frame.shape[0]}")
                    cap.release()
                    return True
                cap.release()
        
        print("‚ùå No se encontr√≥ ninguna c√°mara disponible")
        print("   Aseg√∫rate de que tu c√°mara est√© conectada y no est√© siendo usada por otra aplicaci√≥n")
        return False
        
    except Exception as e:
        print(f"‚ùå Error verificando c√°mara: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîç VERIFICACI√ìN DEL ENTORNO - Monitor de Emociones Caninas")
    print("=" * 60)
    
    checks = [
        ("Python", check_python_version),
        ("Dependencias", check_dependencies),
        ("Estructura", check_project_structure),
        ("Configuraci√≥n", check_config),
        ("C√°mara", check_camera)
    ]
    
    all_passed = True
    
    for check_name, check_func in checks:
        try:
            if not check_func():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n de {check_name}: {e}")
            all_passed = False
    
    print("\n" + "=" * 60)
    
    if all_passed:
        print("üéâ ¬°VERIFICACI√ìN COMPLETADA EXITOSAMENTE!")
        print("‚úÖ Tu sistema est√° listo para ejecutar el Monitor de Emociones Caninas")
        print("\nüìã Pr√≥ximos pasos:")
        print("   1. Ejecuta: python main.py")
        print("   2. O usa el archivo ejecutar.bat")
        print("   3. Configura tu Chat ID en config.py si no lo has hecho")
    else:
        print("‚ùå VERIFICACI√ìN FALL√ì")
        print("‚ö†Ô∏è Soluciona los problemas mostrados arriba antes de continuar")
        print("\nüîß Soluciones comunes:")
        print("   - Instalar dependencias: pip install -r requirements.txt")
        print("   - Verificar que todos los archivos est√©n presentes")
        print("   - Configurar Chat ID en config.py")
        print("   - Conectar c√°mara y dar permisos")
    
    print("\nüìö Para m√°s ayuda, consulta el README.md")
    
    # Mantener ventana abierta
    input("\nPresiona Enter para salir...")

if __name__ == "__main__":
    main()
